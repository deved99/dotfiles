#+TITLE: Awesome Config
#+PROPERTY: header-args :tangle no

* Libraries
These libraries are used throughout the configuration:
#+begin_src lua :tangle yes
local naughty = require("naughty")
local fs = require("gears.filesystem")
local awful = require("awful")
local gears = require("gears")
local wibox = require("wibox")
local hotkeys_popup = require("awful.hotkeys_popup")
require("awful.hotkeys_popup.keys")
#+end_src
* Error handling
Check if awesome encountered an error during startup and fell back to
another config (This code will only ever execute for the fallback
config, so maybe I can remove it, should test though)
#+begin_src lua :tangle yes
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end
#+end_src
Handle runtime errors after startup:
#+begin_src lua :tangle yes
do
    local in_error = false
    local notify_error = function (e)
        if in_error then return end
        in_error = true
        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = tostring(err) })
        in_error = false
    end
    awesome.connect_signal("debug::error", notify_error)
end
#+end_src
* Variables
I'm collecting variables in a tables, ~RC~; actually, I should how I
do this, ~RC.beautiful~ uses a variable from ~RC~.
#+begin_src lua
<<variables/get_variables>>
<<variables/get_colorscheme>>
<<variables/get_theme>>
RC = {
	vars = get_variables(),
	colorscheme = get_colorscheme(),
        beautiful = get_theme(),
	awesome_dir = fs.get_configuration_dir(),
	config_dir = fs.get_dir("config")
}
#+end_src
This function collects variables:
#+name: variables/get_variables
#+begin_src lua
function get_variables()
    local terminal = "kitty"
    local editor = "nvim"
    return {
            terminal = terminal,
            terminal_fb = "gnome-terminal",
            browser = "firefox",
            browser_fb = "qutebrowser",
            editor = editor,
            editor_cmd = terminal .. " -e " .. editor,
            modkey = "Mod4",
            accent = "4"
    }
end
#+end_src
~colors.lua~ is a generated by Ansible, look into ~templates/~.
#+name: variables/get_colorscheme
#+begin_src lua
function get_colorscheme()
    return require("colors")
end
#+end_src
This sets the theme:
#+name: variables/get_theme
#+begin_src lua
function get_theme()
  local beautiful = require("beautiful")
  beautiful.init(RC.awesome_dir .. "theme/init.lua")
  return beautiful
end
#+end_src
Theme file will be merged too into ~awesome/theme.lua~.
* Decorations
** Tags
This defines the tags and connect them to each screen:
#+begin_src lua :tangle yes
function get_tags()
    local awful = require("awful")

    local tags = { "1", "2", "3", "4" }
    awful.screen.connect_for_each_screen(function(s)
        -- Each screen has its own tag table.
        awful.tag(tags, s, awful.layout.layouts[1])
    end)

    return tags
end
RC.tags = get_tags()
#+end_src
** Menu
Wrap everything in a function:
#+begin_src lua
function get_menu()
#+end_src
It depend on this variables:
#+begin_src lua
local beautiful = RC.beautiful
local terminal = RC.vars.terminal
local browser = RC.vars.browser
local editor_cmd = RC.vars.editor_cmd
#+end_src
Create a launcher widget and a main menu:
#+begin_src lua
local awesomemenu = {
    { "hotkeys", function() hotkeys_popup.show_help(nil, awful.screen.focused()) end },
    { "manual", terminal .. " -e man awesome" },
    { "edit config", editor_cmd .. " " .. awesome.conffile },
    { "restart", awesome.restart },
    { "quit", function() awesome.quit() end },
}

local menu_items = {
    { "open terminal", terminal },
    { "open browser", browser },
    { "awesome", awesomemenu, beautiful.awesome_icon },
}

return awful.menu({ items = menu_items } )
#+end_src
Close the above function:
#+begin_src lua
end
RC.menu = get_menu()
#+end_src
** Bar
Wrap everything into a function:
#+begin_src lua :tangle yes :noweb yes
function set_bar()
  <<decorations/bar/deps>>
end
set_bar()
#+end_src
Needed variables:
#+name: decorations/bar/deps
#+begin_src lua
local taglist_buttons = RC.binds.tags
local tasklist_buttons = RC.binds.task
local beautiful = RC.beautiful
local mymainmenu = RC.menu
#+end_src
Actual bar, I should split it in more manageable bits:
#+begin_src lua
-- Keyboard map indicator and switcher
mykeyboardlayout = awful.widget.keyboardlayout()
-- Create a textclock widget
mytextclock = wibox.widget.textclock()

awful.screen.connect_for_each_screen(function(s)
    -- Create a promptbox for each screen
    s.mypromptbox = awful.widget.prompt()
    -- Create an imagebox widget which will contain an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    s.mylayoutbox = awful.widget.layoutbox(s)
    s.mylayoutbox:buttons(gears.table.join(
                           awful.button({ }, 1, function () awful.layout.inc( 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(-1) end),
                           awful.button({ }, 4, function () awful.layout.inc( 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(-1) end)))
    -- Create a taglist widget
    s.mytaglist = awful.widget.taglist {
        screen  = s,
        filter  = awful.widget.taglist.filter.all,
        buttons = taglist_buttons
    }

    s.mytasklist = awful.widget.tasklist {
        screen  = s,
        filter  = awful.widget.tasklist.filter.currenttags,
        buttons = tasklist_buttons
    }
    -- Create the wibox
    s.mywibox = awful.wibar({ position = "top", screen = s, bg = "transparent" })

    -- Add widgets to the wibox
    s.mywibox:setup {
        layout = wibox.layout.align.horizontal,
        { -- Left widgets
            layout = wibox.layout.fixed.horizontal,
            s.mytaglist,
            s.mypromptbox,
        },
        s.mytasklist, -- Middle widget
        { -- Right widgets
            layout = wibox.layout.fixed.horizontal,
	    mpd,
            wibox.widget.systray(),
            mytextclock,
            s.mylayoutbox,
        },
    }
end)
#+end_src
* Keybindings
** Global
*** Keys
As usual, wrap everything in a function.
#+begin_src lua
function set_global_keys()
#+end_src
These are the used variables:
#+begin_src lua
local modkey = RC.vars.modkey
local N = #RC.tags
local browser = RC.vars.browser
local browser_fallback = RC.vars.browser_fb
local mymainmenu = RC.menu
local terminal = RC.vars.terminal
local terminal_fallback = RC.vars.terminal_fb
#+end_src
And this is the actual function:
#+begin_src lua
local function exec(s)
  return function () awful.spawn(s) end
end

local misc = gears.table.join(
    awful.key({ modkey,           }, "Escape",      hotkeys_popup.show_help,
              {description="show help", group="awesome"}),
    awful.key({ modkey,           }, "w", function () mymainmenu:show() end,
              {description = "show main menu", group = "awesome"})
)

local layout = gears.table.join(
    awful.key({ modkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
        end,
        {description = "focus next by index", group = "client"}
    ),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
        end,
        {description = "focus previous by index", group = "client"}
    ),
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end,
              {description = "swap with next client by index", group = "client"}),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end,
              {description = "swap with previous client by index", group = "client"}),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end,
              {description = "focus the next screen", group = "screen"}),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end,
              {description = "focus the previous screen", group = "screen"}),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto,
              {description = "focus urgent", group = "client"}),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end,
        {description = "focus previous", group = "client"}),
    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)          end,
              {description = "increase master width factor", group = "layout"}),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)          end,
              {description = "decrease master width factor", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1, nil, true) end,
              {description = "increase the number of master clients", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1, nil, true) end,
              {description = "decrease the number of master clients", group = "layout"}),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1, nil, true)    end,
              {description = "increase the number of columns", group = "layout"}),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1, nil, true)    end,
              {description = "decrease the number of columns", group = "layout"}),
    awful.key({ modkey,           }, "space", function () awful.layout.inc( 1)                end,
              {description = "select next", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(-1)                end,
              {description = "select previous", group = "layout"}),
    awful.key({ modkey, "Control" }, "n",
              function ()
                  local c = awful.client.restore()
                  -- Focus restored client
                  if c then
                    c:emit_signal(
                        "request::activate", "key.unminimize", {raise = true}
                    )
                  end
              end,
              {description = "restore minimized", group = "client"})
)

local programs = gears.table.join(
    -- Standard program
    awful.key({ modkey,           }, "s", exec(terminal),
              {description = "open a terminal", group = "launcher"}),
    awful.key({ modkey, "Shift"   }, "s", exec(terminal_fallback),
              {description = "open a terminal", group = "launcher"}),
    awful.key({ modkey,           }, "b", exec(browser),
              {description = "open a browser", group = "launcher"}),
    awful.key({ modkey, "Shift"   }, "b", exec(browser_fallback),
              {description = "open a browser", group = "launcher"}),
    awful.key({ modkey,           }, "Return", function () awful.spawn("emojis") end,
              {description = "open a browser", group = "launcher"}),
    awful.key({ modkey,           }, "e", exec("emacsclient -c"),
              {description = "open emacs", group = "launcher"}),
    -- Menus
    awful.key({ modkey }, "Tab", function() awful.spawn("menu") end,
              {description = "run menu", group = "launcher"}),
    awful.key({ modkey }, "p", function() awful.spawn("passmenu") end,
              {description = "copy pwd", group = "launcher"})
)

local notifications = gears.table.join(
    awful.key({ modkey }, "t", exec("timebat"),
              {description = "Show time/battery", group = "notifications"})
)

local media = gears.table.join(
    -- Brightness
    awful.key({}, "XF86MonBrightnessUp", exec("light -A 10"),
              {description = "Increase brightness", group = "media"}),
    awful.key({}, "XF86MonBrightnessDown", exec("light -U 10"),
              {description = "Decrease brightness", group = "media"}),
    -- Volume
    awful.key({}, "XF86AudioMute", exec("pactl set-sink-mute @DEFAULT_SINK@ toggle "),
              {description = "Toggle volume", group = "media"}),
    awful.key({}, "XF86AudioRaiseVolume", exec("pactl set-sink-volume @DEFAULT_SINK@ +10%"),
              {description = "Raise volume", group = "media"}),
    awful.key({}, "XF86AudioLowerVolume", exec("pactl set-sink-volume @DEFAULT_SINK@ -10%"),
              {description = "Decrease volume", group = "media"}),
    awful.key({ modkey }, "m", exec("btmic"),
              {description = "Toggle mic", group = "media"}),
    -- MPD
    awful.key({}, "XF86AudioPlay", exec("song toggle"),
              {description = "Pause/play music", group = "media"}),
    awful.key({}, "XF86AudioNext", exec("song next"),
              {description = "Next song", group = "media"}),
    awful.key({}, "XF86AudioPrev", exec("song prev"),
              {description = "Prev song", group = "media"}),
    -- Screenshot
    awful.key({}, "Print", exec("flameshot gui"),
              {description = "Screenshot", group = "media"})
)

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it work on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
ws = gears.table.join()
for i = 1, N do
    ws = gears.table.join(ws,
        -- View tag only.
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = awful.screen.focused()
                        local tag = screen.tags[i]
                        if tag then
                           tag:view_only()
                        end
                  end,
                  {description = "view tag #"..i, group = "tag"}),
        -- Toggle tag display.
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus then
                          local tag = client.focus.screen.tags[i]
                          if tag then
                              client.focus:move_to_tag(tag)
                          end
                     end
                  end,
                  {description = "move focused client to tag #"..i, group = "tag"})
    )
end

local global_keys = gears.table.join(misc,layout,programs,media,notifications,ws)
root.keys(global_keys)
#+end_src
Close the function then call it:
#+begin_src lua
end
set_global_keys()
#+end_src
*** Buttons
As usual, wrap everything in a function.
#+begin_src lua
function set_global_keys()
#+end_src
These are the used variables:
#+begin_src lua
local mymainmenu = RC.menu
local modkey = RC.vars.modkey
#+end_src
Actual function
#+begin_src lua
local r = gears.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end)
)
root.buttons(r)
#+end_src
Close function and execute it:
#+begin_src lua
end
set_global_buttons()
#+end_src
* Rules & signals
