#+TITLE: Awesome Config
#+PROPERTY: header-args :tangle rc.lua

* Libraries
This is used for notifications:
#+begin_src lua
local naughty = require("naughty")
#+end_src
Used to get paths:
#+begin_src lua
local fs = require("gears.filesystem")
#+end_src
Should check what exactly this does contain:
#+begin_src lua
local awful = require("awful")
#+end_src
Utilities to merge tables:
#+begin_src lua
local gears = require("gears")
#+end_src
This should be a graphical lib:
#+begin_src lua
local wibox = require("wibox")
#+end_src
* Error handling
Check if awesome encountered an error during startup and fell back to
another config (This code will only ever execute for the fallback
config, so maybe I can remove it, should test though)
#+begin_src lua
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end
#+end_src
Handle runtime errors after startup:
#+begin_src lua
do
    local in_error = false
    local notify_error = function (e)
        if in_error then return end
        in_error = true
        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = tostring(err) })
        in_error = false
    end
    awesome.connect_signal("debug::error", notify_error)
end
#+end_src
* Variables
This function collects variables:
#+begin_src lua
function get_variables()
    local terminal = "kitty"
    local editor = "nvim"
    return {
            terminal = terminal,
            terminal_fb = "gnome-terminal",
            browser = "firefox",
            browser_fb = "qutebrowser",
            editor = editor,
            editor_cmd = terminal .. " -e " .. editor,
            modkey = "Mod4",
            accent = "4"
    }
end
#+end_src
~colors.lua~ is a generated by Ansible, look into ~template/~.
#+begin_src lua
function get_colorscheme()
    return require("colors")
end
#+end_src
Collect results:
#+begin_src lua
RC = {
	vars = get_variables(),
	colorscheme = get_colorscheme(),
	awesome_dir = fs.get_configuration_dir(),
	config_dir = fs.get_dir("config")
}
#+end_src
This sets the theme:
#+begin_src lua
local beautiful = require("beautiful")
beautiful.init(RC.awesome_dir .. "theme/init.lua")
RC.beautiful = beautiful
#+end_src
Theme file will be merged too into ~awesome/theme.lua~.
* Decorations
** Tags
This defines the tags and connect them to each screen:
#+begin_src lua
function get_tags()
    local awful = require("awful")

    local tags = { "1", "2", "3", "4" }
    awful.screen.connect_for_each_screen(function(s)
        -- Each screen has its own tag table.
        awful.tag(tags, s, awful.layout.layouts[1])
    end)

    return tags
end
#+end_src
Save this to var:
#+begin_src lua
RC.tags = get_tags()
#+end_src
** Menu
Wrap everything in a function:
#+begin_src lua
function get_menu()
#+end_src
It requires these, should consider wheter to move theme to libraries:
#+begin_src lua
local awful = require("awful")
local hotkeys_popup = require("awful.hotkeys_popup")
require("awful.hotkeys_popup.keys")
#+end_src
It depend on this variables:
#+begin_src lua
local beautiful = RC.beautiful
local terminal = RC.vars.terminal
local browser = RC.vars.browser
local editor_cmd = RC.vars.editor_cmd
#+end_src
Create a launcher widget and a main menu:
#+begin_src lua
local awesomemenu = {
    { "hotkeys", function() hotkeys_popup.show_help(nil, awful.screen.focused()) end },
    { "manual", terminal .. " -e man awesome" },
    { "edit config", editor_cmd .. " " .. awesome.conffile },
    { "restart", awesome.restart },
    { "quit", function() awesome.quit() end },
}

local menu_items = {
    { "open terminal", terminal },
    { "open browser", browser },
    { "awesome", awesomemenu, beautiful.awesome_icon },
}

return awful.menu({ items = menu_items } )
#+end_src
Close the above function:
#+begin_src lua
end
#+end_src
And finally save it to a variable:
#+begin_src lua
RC.menu = get_menu()
#+end_src
** Bar
Wrap everything into a function:
#+begin_src lua
function set_bar
#+end_src
Needed variables:
#+begin_src lua
local taglist_buttons = RC.binds.tags
local tasklist_buttons = RC.binds.task
local beautiful = RC.beautiful
local mymainmenu = RC.menu
#+end_src
Actual bar, I should split it in more manageable bits:
#+begin_src lua
-- Keyboard map indicator and switcher
mykeyboardlayout = awful.widget.keyboardlayout()
-- Create a textclock widget
mytextclock = wibox.widget.textclock()

awful.screen.connect_for_each_screen(function(s)
    -- Create a promptbox for each screen
    s.mypromptbox = awful.widget.prompt()
    -- Create an imagebox widget which will contain an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    s.mylayoutbox = awful.widget.layoutbox(s)
    s.mylayoutbox:buttons(gears.table.join(
                           awful.button({ }, 1, function () awful.layout.inc( 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(-1) end),
                           awful.button({ }, 4, function () awful.layout.inc( 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(-1) end)))
    -- Create a taglist widget
    s.mytaglist = awful.widget.taglist {
        screen  = s,
        filter  = awful.widget.taglist.filter.all,
        buttons = taglist_buttons
    }

    s.mytasklist = awful.widget.tasklist {
        screen  = s,
        filter  = awful.widget.tasklist.filter.currenttags,
        buttons = tasklist_buttons
    }
    -- Create the wibox
    s.mywibox = awful.wibar({ position = "top", screen = s, bg = "transparent" })

    -- Add widgets to the wibox
    s.mywibox:setup {
        layout = wibox.layout.align.horizontal,
        { -- Left widgets
            layout = wibox.layout.fixed.horizontal,
            s.mytaglist,
            s.mypromptbox,
        },
        s.mytasklist, -- Middle widget
        { -- Right widgets
            layout = wibox.layout.fixed.horizontal,
	    mpd,
            wibox.widget.systray(),
            mytextclock,
            s.mylayoutbox,
        },
    }
end)
#+end_src
Close function:
#+begin_src lua
end
#+end_src
Actually do all of the above:
#+begin_src lua
set_bar()
#+end_src
* Keybindings
** Global
*** Keys
*** Buttons
* Rules & signals
