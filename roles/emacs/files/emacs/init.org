#+TITLE: Emacs config
#+PROPERTY: header-args :tangle init.el

* prepare
** garbage collecting
How frequently does Emacs garbage collect:
#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000)
#+end_src
** plugins setup
Install ~straight.el~:
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src
Don't load packages on startup:
#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
#+end_src
If not present, install ~use-package~:
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src
If a package is specified, install it:
#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
#+end_src
** Performance stats
This just shows how much did it take for emacs to start and the number of garbage collections done:
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook
  (lambda ()
    (message "Emacs ready in %s with %d garbage collections."
      (format "%.2f seconds"
        (float-time
	  (time-subtract after-init-time before-init-time)))
       gcs-done)))
#+end_src
* visual
** cleanup
I just want to see text, this disable decorations I don't need:
#+begin_src emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tooltip-mode 0)
#+end_src
But I want some space around text:
#+begin_src emacs-lisp
  (fringe-mode 10)
#+end_src
This is equivalent to vim's ~set nowrap~:
#+begin_src emacs-lisp
    (set-default 'truncate-lines t)
#+end_src
** keep context around cursor
This keeps 5 lines before and after the current line:
#+begin_src emacs-lisp
  (setq scroll-margin 5
	scroll-conservatively 10000)
#+end_src
** fonts
As for fonts, I use [[https://www.jetbrains.com/lp/mono/][JetBrains Mono]]:
#+begin_src emacs-lisp
    (add-to-list 'default-frame-alist
		 '(font . "JetBrains Mono 15"))
    (set-fontset-font t 'symbol "Noto Color Emoji" nil 'append)
#+end_src
** theme
This generates themes from a base16 theme:
#+begin_src emacs-lisp
(use-package base16-theme
  :config
  (setq base16-distinct-fringe-background nil)
  (load-theme 'base16-dracula t))
#+end_src
** indent guides
This shows indentations guides in programming languages:
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'column))
#+end_src
** ligatures
These are the used ligatures, disabled 'cause errors:
#+begin_src emacs-lisp :tangle no
  (use-package ligature
    :load-path "manual/ligature.el"
    :config
    (ligature-set-ligatures 'prog-mode
			    '("-|" "-~" "---" "-<<" "-<" "--" "->" "->>" "-->" "///" "/=" "/=="
			      "/>" "//" "/*" "*>" "***" "*/" "<-" "<<-" "<=>" "<=" "<|" "<||"
			      "<|||" "<|>" "<:" "<>" "<-<" "<<<" "<==" "<<=" "<=<" "<==>" "<-|"
			      "<<" "<~>" "<=|" "<~~" "<~" "<$>" "<$" "<+>" "<+" "</>" "</" "<*"
			      "<*>" "<->" "<!--" ":>" ":<" ":::" "::" ":?" ":?>" ":=" "::=" "=>>"
			      "==>" "=/=" "=!=" "=>" "===" "=:=" "==" "!==" "!!" "!=" ">]" ">:"
			      ">>-" ">>=" ">=>" ">>>" ">-" ">=" "&&&" "&&" "|||>" "||>" "|>" "|]"
			      "|}" "|=>" "|->" "|=" "||-" "|-" "||=" "||" ".." ".?" ".=" ".-" "..<"
			      "..." "+++" "+>" "++" "[||]" "[<" "[|" "{|" "??" "?." "?=" "?:" "##"
			      "###" "####" "#[" "#{" "#=" "#!" "#:" "#_(" "#_" "#?" "#(" ";;" "_|_"
			      "__" "~~" "~~>" "~>" "~-" "~@" "$>" "^=" "]#"))
    (global-ligature-mode t))
#+end_src
This shows a color preview inside Emacs for strings like #FF0000
#+begin_src emacs-lisp :padline no
  (use-package rainbow-mode)
#+end_src
** modeline
This outputs the current evil-state:
#+begin_src emacs-lisp
  (defun get_current_state ()
    (cond
     ((eq evil-state 'normal) "NORMAL")
     ((eq evil-state 'insert) "INSERT")
     ((eq evil-state 'visual) "VISUAL")
     ((eq evil-state 'operator) "OPERATOR")
     ((eq evil-state 'replace) "REPLACE")
     ((eq evil-state 'emacs) "EMACS")
     (t "NOT_FOUND")))
#+end_src
This wheter the current buffer has been modified or in read only mode:
#+begin_src emacs-lisp
  (defun is_modified ()
    (cond
     ((buffer-modified-p) "+")
     ((buffer-read-only) "O")
     (t " ")))

#+end_src
This wraps everything up in the modeline:
#+begin_src emacs-lisp
  (setq-default mode-line-format
		(list
		 " "
		 '(:eval (get_current_state))
		 " | %b"
		 '(:eval (is_modified))
		 " (%m)"))
#+end_src
* org mode
Load only export backends I need:
#+begin_src emacs-lisp
  (setq org-export-backends '(html latex ox-gfm))
#+end_src
Some visual options
#+begin_src emacs-lisp
  (setq org-hide-leading-stars t
	org-startup-folded t)
#+end_src
Github flavored Markdown exporter:
#+begin_src emacs-lisp
  (use-package ox-gfm)
#+end_src
* evil-mode
** ~evil~ package:
The main piece, ~evil~:
#+begin_src emacs-lisp
  (use-package evil
#+end_src
Load it after ~undo-tree~:
#+begin_src emacs-lisp :padline no
    :after undo-tree
#+end_src
Then set ~undo-tree~ as undo system:
#+begin_src emacs-lisp :padline no
    :init
    (require 'undo-tree)
    (setq evil-undo-system 'undo-tree)
    (setq evil-undo-function 'undo-tree-undo)
    (setq evil-redo-function 'undo-tree-redo)
#+end_src
Set variables needed by evil-collections:
#+begin_src emacs-lisp :padline no
    (setq evil-want-keybinding nil
	  evil-want-integration t)
#+end_src
Don't print the current mode:
#+begin_src emacs-lisp :padline no
    (setq evil-echo-state nil)
#+end_src
Finally, enable evil:
#+begin_src emacs-lisp :padline no
    :config (evil-mode 1))
#+end_src
** evil integrations
This is a collections of various integrations:
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :init (evil-collection-init))
#+end_src
And this is specific for Org-mode, disabled for now:
#+begin_src emacs-lisp :tangle no
(use-package org-evil
  :after evil)
#+end_src
** vim plugins
This is for a way faster way to change surrounding like parenthesis:
#+begin_src emacs-lisp
(use-package evil-surround
  :after evil
  :config (global-evil-surround-mode 1))
#+end_src
And this is for commenting portions of code:
#+begin_src emacs-lisp
(use-package evil-commentary
  :after evil
  :config (evil-commentary-mode))
#+end_src
This adds indentation based text object:
#+begin_src emacs-lisp
(use-package evil-indent-plus
  :after evil
  :init (evil-indent-plus-default-bindings))
#+end_src
** undo
This is the undo system I use; it also provides a nice visualization of the undo-tree.
#+begin_src emacs-lisp
  (use-package undo-tree
#+end_src
Set where should it save files:
#+begin_src emacs-lisp :padline no
    ;; :init
    ;; (setq undo-tree-auto-save-history (concat user-emacs-directory "undo"))
#+end_src
Enable global mode:
#+begin_src emacs-lisp :padline no
    :config (global-undo-tree-mode))
#+end_src
* LSP
** main package
This enables [[https://github.com/Microsoft/language-server-protocol][LSP]], which provides completions, diagnostics et cetera:
#+begin_src emacs-lisp
  (use-package lsp-mode
#+end_src
Hook it to any programming filetype:
#+begin_src emacs-lisp :padline no
    :hook prog-mode
#+end_src
Disable icons in completions:
#+begin_src emacs-lisp :padline no
    :init (setq lsp-headerline-breadcrumb-enable nil)
#+end_src
Disable diagnostics; I'd prefer to be able to toggle it or to disable it while in insert mode:
#+begin_src emacs-lisp :padline no
    (setq lsp-diagnostics-mode ":none"))
#+end_src
** lsp-ui
This manages the look of LSP:
#+begin_src emacs-lisp
  (use-package lsp-ui
    :config
#+end_src
Disable some stuff; I have to find an alternative solution in the future:
#+begin_src emacs-lisp :padline no
    (setq lsp-ui-doc-enable nil
	  lsp-ui-sideline-show-code-actions nil)
#+end_src
Enable showing info on the right of the screen:
#+begin_src emacs-lisp :padline no
    (setq lsp-ui-sideline-show-hover t
	  lsp-ui-sideline-delay 1))
#+end_src
** completion engine
This is the completion engine, hooked up to lsp-mode:
#+begin_src emacs-lisp
  (use-package company
    :hook (lsp-mode . company-mode)
#+end_src
Loop after the last entry:
#+begin_src emacs-lisp :padline no
  :config
  (setq company-selection-wrap-around t)
#+end_src
Then enable it:
#+begin_src emacs-lisp :padline no
  (company-tng-configure-default))
#+end_src
** magit
This is a git client I want to test:
#+begin_src emacs-lisp
  (use-package magit)
#+end_src
* misc
** todo file
I like using a TODO file, which keeps track of what I'm doing and what I have to do:
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t
        initial-buffer-choice "~/current.org")
#+end_src
** autoclose parenthesis
Autoclose parenthesis, quotation marks, etc:
#+begin_src emacs-lisp
  (electric-pair-mode)
#+end_src
** backup
Sets where to save backup files. Backup always gud.
#+begin_src emacs-lisp
  (setq backup-dir (concat user-emacs-directory "backups")
	backup-directory-alist `(("." . ,backup-dir))
	auto-save-file-name-transforms `((".*", backup-dir t)))
#+end_src
** no tab please
Never insert tabs:
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src
** additional filetypes
Pyright, an LSP server for Python:
#+begin_src emacs-lisp
  (use-package lsp-pyright
  :hook (python-mode . (lambda ()
			  (require 'lsp-pyright)
			  (lsp))))
#+end_src
Rust, added to lsp hook:
#+begin_src emacs-lisp
  (use-package rust-mode
    :hook (rust-mode . lsp))
#+end_src
Miscellanous syntax highlight:
#+begin_src emacs-lisp
  (use-package json-mode)
  (use-package yaml-mode)
  (use-package dockerfile-mode)
#+end_src
