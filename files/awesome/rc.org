#+TITLE: Awesome Config

* Summary
So, ~rc.lua~ is divided in tree sections:
#+begin_src lua :tangle rc.lua :noweb yes :comments noweb
  <<prepare/libraries>>
  <<prepare/errors>>
  <<prepare/variables>>
  <<decorations/menu>>
  <<workflow/layouts>>
  <<workflow/tags>>
  <<workflow/kb>>
  <<workflow/rules>>
  <<workflow/signals>>
  <<decorations/bar>>
  <<workflow/autostart>>
#+end_src
Furthermore, on tangle, this document generates a ~theme.lua~.
#+begin_src lua :tangle theme.lua :noweb yes
  local cs = RC.colorscheme
  <<misc/merge>>
  <<theme/parts>>
  
  v = {
    general = get_general(),
    menu = get_menu(),
    notifications = get_notifications(),
    bar = get_bar(),
    layouts = get_layouts(),
  }
  return merge(v)
#+end_src
* Preparation
** Libraries
These libraries are used throughout the configuration:
#+name: prepare/libraries
#+begin_src lua
  local naughty = require("naughty")
  local fs = require("gears.filesystem")
  local awful = require("awful")
  local gears = require("gears")
  local wibox = require("wibox")
  local hotkeys_popup = require("awful.hotkeys_popup")
  require("awful.hotkeys_popup.keys")
#+end_src
** Error handling
#+name: prepare/errors
#+begin_src lua
  if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
  end
  do
    local in_error = false
    local notify_error = function (err)
      if in_error then return end
      in_error = true
      naughty.notify({ preset = naughty.config.presets.critical,
                       title = "Oops, an error happened!",
                       text = tostring(err) })
      in_error = false
    end
    awesome.connect_signal("debug::error", notify_error)
  end
#+end_src
** Variables
I'm collecting variables in a tables, ~RC~; actually, I should how I
do this, ~RC.beautiful~ uses a variable from ~RC~.
#+name: prepare/variables
#+begin_src lua :noweb yes
  <<variables/functions>>
  RC = {
    awesome_dir = fs.get_configuration_dir(),
    config_dir = fs.get_dir("config")
  }
  RC.vars = get_variables()
  RC.colorscheme = get_colorscheme()
  RC.beautiful = get_theme()
  RC.binds = {}
#+end_src
This function collects variables:
#+begin_src lua :noweb-ref variables/functions
  function get_variables()
      return require("vars")
  end
#+end_src
~colors.lua~ is a generated by Ansible, look into ~templates~ directory for ~emacs~ role.
#+begin_src lua :noweb-ref variables/functions
  function get_colorscheme()
      return require("colors")
  end
#+end_src
This sets the theme:
#+begin_src lua :noweb-ref variables/functions
  function get_theme()
    local beautiful = require("beautiful")
    beautiful.init(RC.awesome_dir .. "theme.lua")
    return beautiful
  end
#+end_src
** basic theming (borders, wallpaper, ~{fg,bg}_*~)
#+begin_src lua :noweb yes :noweb-ref theme/parts
  local function get_general()
    local r = {
            font          = "Fira Code 10",
            bg_normal     = cs.transparent,
            bg_focus      = cs.transparent,
            bg_urgent     = cs.red,
            bg_minimize   = cs.grey,
            bg_systray    = cs.black,
            fg_normal     = cs.white,
            fg_focus      = cs.accent,
            fg_urgent     = cs.white,
            fg_minimize   = cs.white,
            -- Gap & border
            useless_gap   = 5,
            border_width  = 5,
            border_normal = cs.grey,
            border_focus  = cs.accent,
            border_marked = cs.red,
            wallpaper = "~/bg.jpg",
            icon_theme = nil
    }

    return r
  end
#+end_src
** notifications theme
#+begin_src lua :noweb-ref theme/parts
  local function get_notifications()  
    local r = {
            notification_font = "Fira Code 20",
            notification_bg = cs.black,
            notification_fg = cs.accent,
            notification_border_color = cs.accent,
            notification_max_width = 600,
            --notification_border_width = 10
    }

    return r
  end
#+end_src
* Workflow
** Keybindings
*** Global keys
As usual, wrap everything in a function.
#+begin_src lua :noweb yes :noweb-ref workflow/kb
  function set_global_keys()
    <<workflow/kb/global-keys>>
  end
  set_global_keys()
#+end_src
These are the used variables:
#+begin_src lua :noweb-ref workflow/kb/global-keys
local modkey = RC.vars.modkey
local N = #RC.tags
local browser = RC.vars.browser
local browser_fallback = RC.vars.browser_fb
local mymainmenu = RC.menu
local terminal = RC.vars.terminal
local terminal_fallback = RC.vars.terminal_fb
#+end_src
And this is the actual function:
#+begin_src lua :noweb-ref workflow/kb/global-keys
local function exec(s)
  return function () awful.spawn(s) end
end

local misc = gears.table.join(
    awful.key({ modkey,           }, "Escape",      hotkeys_popup.show_help,
              {description="show help", group="awesome"}),
    awful.key({ modkey,           }, "w", function () mymainmenu:show() end,
              {description = "show main menu", group = "awesome"})
)

local layout = gears.table.join(
    awful.key({ modkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
        end,
        {description = "focus next by index", group = "client"}
    ),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
        end,
        {description = "focus previous by index", group = "client"}
    ),
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end,
              {description = "swap with next client by index", group = "client"}),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end,
              {description = "swap with previous client by index", group = "client"}),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end,
              {description = "focus the next screen", group = "screen"}),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end,
              {description = "focus the previous screen", group = "screen"}),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto,
              {description = "focus urgent", group = "client"}),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end,
        {description = "focus previous", group = "client"}),
    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)          end,
              {description = "increase master width factor", group = "layout"}),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)          end,
              {description = "decrease master width factor", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1, nil, true) end,
              {description = "increase the number of master clients", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1, nil, true) end,
              {description = "decrease the number of master clients", group = "layout"}),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1, nil, true)    end,
              {description = "increase the number of columns", group = "layout"}),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1, nil, true)    end,
              {description = "decrease the number of columns", group = "layout"}),
    awful.key({ modkey,           }, "space", function () awful.layout.inc( 1)                end,
              {description = "select next", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(-1)                end,
              {description = "select previous", group = "layout"}),
    awful.key({ modkey, "Control" }, "n",
              function ()
                  local c = awful.client.restore()
                  -- Focus restored client
                  if c then
                    c:emit_signal(
                        "request::activate", "key.unminimize", {raise = true}
                    )
                  end
              end,
              {description = "restore minimized", group = "client"})
)

local programs = gears.table.join(
    -- Standard program
    awful.key({ modkey,           }, "s", exec(terminal),
              {description = "open a terminal", group = "launcher"}),
    awful.key({ modkey, "Shift"   }, "s", exec(terminal_fallback),
              {description = "open a terminal", group = "launcher"}),
    awful.key({ modkey,           }, "b", exec(browser),
              {description = "open a browser", group = "launcher"}),
    awful.key({ modkey, "Shift"   }, "b", exec(browser_fallback),
              {description = "open a browser", group = "launcher"}),
    awful.key({ modkey,           }, "Return", function () awful.spawn("emojis") end,
              {description = "open a browser", group = "launcher"}),
    awful.key({ modkey,           }, "e", exec("emacsclient -c"),
              {description = "open emacs", group = "launcher"}),
    -- Menus
    awful.key({ modkey }, "Tab", function() awful.spawn("menu") end,
              {description = "run menu", group = "launcher"}),
    awful.key({ modkey }, "p", function() awful.spawn("passmenu") end,
              {description = "copy pwd", group = "launcher"})
)

local notifications = gears.table.join(
    awful.key({ modkey }, "t", exec("timebat"),
              {description = "Show time/battery", group = "notifications"})
)

local media = gears.table.join(
    -- Brightness
    awful.key({}, "XF86MonBrightnessUp", exec("light -A 10"),
              {description = "Increase brightness", group = "media"}),
    awful.key({}, "XF86MonBrightnessDown", exec("light -U 10"),
              {description = "Decrease brightness", group = "media"}),
    -- Volume
    awful.key({}, "XF86AudioMute", exec("pactl set-sink-mute @DEFAULT_SINK@ toggle "),
              {description = "Toggle volume", group = "media"}),
    awful.key({}, "XF86AudioRaiseVolume", exec("pactl set-sink-volume @DEFAULT_SINK@ +10%"),
              {description = "Raise volume", group = "media"}),
    awful.key({}, "XF86AudioLowerVolume", exec("pactl set-sink-volume @DEFAULT_SINK@ -10%"),
              {description = "Decrease volume", group = "media"}),
    awful.key({ modkey }, "m", exec("btmic"),
              {description = "Toggle mic", group = "media"}),
    -- MPD
    awful.key({}, "XF86AudioPlay", exec("song toggle"),
              {description = "Pause/play music", group = "media"}),
    awful.key({}, "XF86AudioPause", exec("song toggle"),
              {description = "Pause/play music", group = "media"}),
    awful.key({}, "XF86AudioNext", exec("song next"),
              {description = "Next song", group = "media"}),
    awful.key({}, "XF86AudioPrev", exec("song prev"),
              {description = "Prev song", group = "media"}),
    -- Screenshot
    awful.key({}, "Print", exec("flameshot gui"),
              {description = "Screenshot", group = "media"})
)

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it work on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
ws = gears.table.join()
for i = 1, N do
    ws = gears.table.join(ws,
        -- View tag only.
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = awful.screen.focused()
                        local tag = screen.tags[i]
                        if tag then
                           tag:view_only()
                        end
                  end,
                  {description = "view tag #"..i, group = "tag"}),
        -- Toggle tag display.
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus then
                          local tag = client.focus.screen.tags[i]
                          if tag then
                              client.focus:move_to_tag(tag)
                          end
                     end
                  end,
                  {description = "move focused client to tag #"..i, group = "tag"})
    )
end

local global_keys = gears.table.join(misc,layout,programs,media,notifications,ws)
root.keys(global_keys)
#+end_src
*** Global buttons
As usual, wrap everything in a function.
#+begin_src lua :noweb yes :noweb-ref workflow/kb
  function set_global_buttons()
    <<workflow/kb/global-buttons>>
  end
  set_global_buttons()
#+end_src
These are the used variables:
#+begin_src lua :noweb-ref workflow/kb/global-buttons
local mymainmenu = RC.menu
local modkey = RC.vars.modkey
#+end_src
Actual function
#+begin_src lua :noweb-ref workflow/kb/global-buttons
local r = gears.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end)
)
root.buttons(r)
#+end_src
*** Client keys
Wrap everything in a function:
#+begin_src lua :noweb yes :noweb-ref workflow/kb
  function set_client_keys()
    <<workflow/kb/client_keys>>
  end
  RC.binds.ck = set_client_keys()
#+end_src
Actual keybindings:
#+begin_src lua :noweb-ref workflow/kb/client_keys
  local modkey = RC.vars.modkey

  local r = gears.table.join(
      awful.key({ modkey }, "f",
          function (c)
              c.fullscreen = not c.fullscreen
              c:raise()
          end,
          {description = "toggle fullscreen", group = "client"}),
      awful.key({ modkey, "Shift" }, "q", function (c) c:kill() end,
                {description = "close", group = "client"}),
      awful.key({ modkey }, "o", function (c) c:move_to_screen() end,
                {description = "move to screen", group = "client"}),
      awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle,
                {description = "toggle floating", group = "client"}),
      awful.key({ modkey }, "n",
          function (c)
              -- The client currently has the input focus, so it cannot be
              -- minimized, since minimized clients can't have the focus.
              c.minimized = true
          end ,
          {description = "minimize", group = "client"})
  )

  return r
#+end_src
*** Client buttons
Wrap everything in a function:
#+begin_src lua :noweb yes :noweb-ref workflow/kb
  function set_client_buttons()
    <<workflow/kb/client_buttons>>
  end
  RC.binds.cb = set_client_buttons()
#+end_src
Actual buttons:
#+begin_src lua :noweb-ref workflow/kb/client_buttons
  local modkey = RC.vars.modkey

  local r = gears.table.join(
      awful.button({ }, 1, function (c)
          c:emit_signal("request::activate", "mouse_click", {raise = true})
      end),
      awful.button({ modkey }, 1, function (c)
          c:emit_signal("request::activate", "mouse_click", {raise = true})
          awful.mouse.client.move(c)
      end),
      awful.button({ modkey }, 3, function (c)
          c:emit_signal("request::activate", "mouse_click", {raise = true})
          awful.mouse.client.resize(c)
      end)
  )

  return r
#+end_src
*** Taglist buttons
Wrap everything in a function:
#+begin_src lua :noweb yes :noweb-ref workflow/kb
  function set_taglist_buttons()
    <<workflow/kb/taglist>>
  end
  RC.binds.tags = set_taglist_buttons()
#+end_src
This the actual code:
#+name: workflow/kb/taglist
#+begin_src lua
  local modkey = RC.vars.modkey

  -- Create a wibox for each screen and add it
  local r = gears.table.join(
                      awful.button({ }, 1, function(t) t:view_only() end),
                      awful.button({ modkey }, 1, function(t)
                                                if client.focus then
                                                    client.focus:move_to_tag(t)
                                                end
                                            end),
                      awful.button({ }, 3, awful.tag.viewtoggle),
                      awful.button({ modkey }, 3, function(t)
                                                if client.focus then
                                                    client.focus:toggle_tag(t)
                                                end
                                            end),
                      awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),
                      awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end)
                  )

  return r
#+end_src
*** Tasklist buttons
Wrap everything in a function:
#+begin_src lua :noweb yes :noweb-ref workflow/kb
  function set_tasklist_buttons()
    <<workflow/kb/tasklist>>
  end
  RC.binds.task = set_tasklist_buttons()
#+end_src
This the actual code:
#+name: workflow/kb/tasklist
#+begin_src lua
  local r = gears.table.join(
                       awful.button({ }, 1, function (c)
                                                if c == client.focus then
                                                    c.minimized = true
                                                else
                                                    c:emit_signal(
                                                        "request::activate",
                                                        "tasklist",
                                                        {raise = true}
                                                    )
                                                end
                                            end),
                       awful.button({ }, 3, function()
                                                awful.menu.client_list({ theme = { width = 250 } })
                                            end),
                       awful.button({ }, 4, function ()
                                                awful.client.focus.byidx(1)
                                            end),
                       awful.button({ }, 5, function ()
                                                awful.client.focus.byidx(-1)
                                            end))

  return r
#+end_src
** Layouts
#+name: workflow/layouts
#+begin_src lua
  function set_layouts()
    awful.layout.layouts = {
        awful.layout.suit.tile,
        awful.layout.suit.floating,
    }
  end
  set_layouts()
#+end_src
This is the relevant code snippet for the theme::
#+begin_src lua :noweb-ref theme/parts
  local function get_layouts()
    local fs = require("gears.filesystem")
    local themes_path = fs.get_themes_dir()

    local r = {
        layout_fairh = themes_path.."default/layouts/fairhw.png",
        layout_fairv = themes_path.."default/layouts/fairvw.png",
        layout_floating  = themes_path.."default/layouts/floatingw.png",
        layout_magnifier = themes_path.."default/layouts/magnifierw.png",
        layout_max = themes_path.."default/layouts/maxw.png",
        layout_fullscreen = themes_path.."default/layouts/fullscreenw.png",
        layout_tilebottom = themes_path.."default/layouts/tilebottomw.png",
        layout_tileleft   = themes_path.."default/layouts/tileleftw.png",
        layout_tile= themes_path.."default/layouts/tilew.png",
        layout_tiletop = themes_path.."default/layouts/tiletopw.png",
        layout_spiral  = themes_path.."default/layouts/spiralw.png",
        layout_dwindle = themes_path.."default/layouts/dwindlew.png",
        layout_cornernw = themes_path.."default/layouts/cornernww.png",
        layout_cornerne = themes_path.."default/layouts/cornernew.png",
        layout_cornersw = themes_path.."default/layouts/cornersww.png",
        layout_cornerse = themes_path.."default/layouts/cornersew.png",
    }

    return r
  end
#+end_src
** Tags
This defines the tags and connect them to each screen:
#+name: workflow/tags
#+begin_src lua
  function get_tags()
    local awful = require("awful")

    local tags = { "1", "2", "3", "4", "5", "6", "7", "8" }
    awful.screen.connect_for_each_screen(function(s)
      -- Each screen has its own tag table.
      awful.tag(tags, s, awful.layout.layouts[1])
    end)

    return tags
  end
  RC.tags = get_tags()
#+end_src
** Rules
#+name: workflow/rules
#+begin_src lua :noweb yes
  local beautiful = RC.beautiful
  local clientbuttons = RC.binds.cb
  local clientkeys = RC.binds.ck

  -- Rules to apply to new clients (through the "manage" signal).
  awful.rules.rules = {
      -- All clients will match this rule.
      { rule = { },
        properties = { border_width = beautiful.border_width,
                       border_color = beautiful.border_normal,
                       keys = clientkeys,
                       buttons = clientbuttons,
                       raise = true,
                       maximized = false,
                       -- floating = false,
                       focus = awful.client.focus.filter,
                       screen = awful.screen.preferred,
                       placement = awful.placement.no_overlap+awful.placement.no_offscreen,
          }
      },

      -- Popups -> floating
      { rule_any = {
          role = {
            "AlarmWindow",  -- Thunderbird's calendar.
            "ConfigManager",  -- Thunderbird's about:config.
            "pop-up",       -- e.g. Google Chrome's (detached) Developer Tools.
          },
          class = { "Gcr-prompter" },
        }, properties = { floating = true, placement = awful.placement.centered }},

      ---- Program -> tags
      -- Tag 1
      { rule = { class = "kitty" },
        properties = { tag = "1" } },
      -- Tag 2
      { rule = { role = "browser" },
        properties = { tag = "2" } },
      -- Tag 3
      { rule = { class = "Thunderbird" },
        properties = { tag = "7" } },
      { rule = { class = "Pavucontrol" },
        properties = { tag = "8" } },
  }
#+end_src
** Signals
#+name: workflow/signals
#+begin_src lua :noweb yes
  local beautiful = RC.beautiful

  require("awful.autofocus")
  require("awful.remote")

  -- Signal function to execute when a new client appears.
  client.connect_signal("manage", function (c)
      -- Set the windows at the slave,
      -- i.e. put it at the end of others instead of setting it master.
      if not awesome.startup then awful.client.setslave(c) end

      if awesome.startup
        and not c.size_hints.user_position
        and not c.size_hints.program_position then
          -- Prevent clients from being unreachable after screen count changes.
          awful.placement.no_offscreen(c)
      end

      -- c.shape = gears.shape.rounded_rect
  end)

  -- Enable sloppy focus, so that focus follows mouse.
  client.connect_signal("mouse::enter", function(c)
      c:emit_signal("request::activate", "mouse_enter", {raise = false})
  end)

  client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
  client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)

  ------ WALLPAPER

  local function set_wallpaper(s)
      -- Wallpaper
      if beautiful.wallpaper then
          local wallpaper = beautiful.wallpaper
          -- If wallpaper is a function, call it with the screen
          if type(wallpaper) == "function" then
              wallpaper = wallpaper(s)
          end
          gears.wallpaper.maximized(wallpaper, s, false)
      end
  end

  screen.connect_signal("property::geometry", set_wallpaper)

  awful.screen.connect_for_each_screen(function(s)
          set_wallpaper(s)
  end)
#+end_src
** Autostart
#+name: workflow/autostart
#+begin_src lua
  RC.autostart = RC.config_dir .. "autostart"
  require("awful.util").spawn("chmod +x " .. RC.autostart)
  require("awful.util").spawn(RC.autostart)
#+end_src
This is the autostart script:
#+begin_src bash :tangle autostart
  #!/bin/bash
  while read -r line; do
  PROGRAM=$(echo $line | cut -d" " -f1)
  pidof -q $PROGRAM || $line &
  done <<EOF
  picom --experimental-backends
  flameshot
  EOF
#+end_src
* Decorations
** Menu
Wrap everything in a function:
#+name: decorations/menu
#+begin_src lua :noweb yes
  function get_menu()
  <<decorations/menu/functions>>
  end
  RC.menu = get_menu()
#+end_src
It depend on this variables:
#+begin_src lua :noweb-ref decorations/menu/functions
  local beautiful = RC.beautiful
  local terminal = RC.vars.terminal
  local browser = RC.vars.browser
  local editor_cmd = RC.vars.editor_cmd
#+end_src
Create a launcher widget and a main menu:
#+begin_src lua :noweb-ref decorations/menu/functions
  local awesomemenu = {
      { "hotkeys", function() hotkeys_popup.show_help(nil, awful.screen.focused()) end },
      { "manual", terminal .. " -e man awesome" },
      { "edit config", editor_cmd .. " " .. awesome.conffile },
      { "restart", awesome.restart },
      { "quit", function() awesome.quit() end },
  }

  local menu_items = {
      { "open terminal", terminal },
      { "open browser", browser },
      { "awesome", awesomemenu, beautiful.awesome_icon },
  }

  return awful.menu({ items = menu_items } )
#+end_src
This is the theme menu:
#+begin_src lua :noweb-ref theme/parts
  function get_menu()
    local theme_assets = require("beautiful.theme_assets")
    local xresources = require("beautiful.xresources")
    local dpi = xresources.apply_dpi

    local gfs = require("gears.filesystem")
    local themes_path = gfs.get_themes_dir()

    local height = dpi(25)
    local taglist_square_size = dpi(4)

    local r = {
            menu_font = "Fira Code 18",
            menu_submenu_icon = themes_path.."default/submenu.png",
            -- colors
            menu_bg_normal = cs.black_semi,
            menu_bg_focus = cs.accent_semi,
            menu_fg_normal = cs.white,
            menu_fg_focus = cs.white,
            menu_border_color = cs.accent,
            -- geometry
            menu_height = height,
            menu_width  = dpi(300),
            taglist_squares_sel = theme_assets.taglist_squares_sel(
                taglist_square_size, cs.accent
            ),
            taglist_squares_unsel = theme_assets.taglist_squares_unsel(
                taglist_square_size, cs.white
            ),
            awesome_icon = theme_assets.awesome_icon(
                height, cs.transparent, cs.accent
            ),
    }

    return r
  end
#+end_src
** Bar
Wrap everything into a function:
#+name: decorations/bar
#+begin_src lua :noweb yes
  function set_bar()
    <<decorations/bar/f>>
  end
  set_bar()
#+end_src
Needed variables:
#+begin_src lua :noweb-ref decorations/bar/f
local taglist_buttons = RC.binds.tags
local tasklist_buttons = RC.binds.task
local beautiful = RC.beautiful
local mymainmenu = RC.menu
#+end_src
Actual bar, I should split it in more manageable bits:
#+begin_src lua :noweb-ref decorations/bar/f
  -- Keyboard map indicator and switcher
  mykeyboardlayout = awful.widget.keyboardlayout()
  -- Create a textclock widget
  mytextclock = wibox.widget.textclock()

  bar_bg = RC.colorscheme.black_semi
  awful.screen.connect_for_each_screen(function(s)
      -- Create a promptbox for each screen
      s.mypromptbox = awful.widget.prompt()
      -- Create an imagebox widget which will contain an icon indicating which layout we're using.
      -- We need one layoutbox per screen.
      s.mylayoutbox = awful.widget.layoutbox(s)
      s.mylayoutbox:buttons(gears.table.join(
                             awful.button({ }, 1, function () awful.layout.inc( 1) end),
                             awful.button({ }, 3, function () awful.layout.inc(-1) end),
                             awful.button({ }, 4, function () awful.layout.inc( 1) end),
                             awful.button({ }, 5, function () awful.layout.inc(-1) end)))
      -- Create a taglist widget
      s.mytaglist = awful.widget.taglist {
          screen  = s,
          filter  = awful.widget.taglist.filter.all,
          buttons = taglist_buttons
      }

      s.mytasklist = awful.widget.tasklist {
          screen  = s,
          filter  = awful.widget.tasklist.filter.currenttags,
          buttons = tasklist_buttons
      }
      -- Create the wibox
      s.mywibox = awful.wibar({ position = "top", screen = s, bg = bar_bg })

      -- Add widgets to the wibox
      s.mywibox:setup {
          layout = wibox.layout.align.horizontal,
          { -- Left widgets
              layout = wibox.layout.fixed.horizontal,
              s.mytaglist,
              s.mypromptbox,
          },
          s.mytasklist, -- Middle widget
          { -- Right widgets
              layout = wibox.layout.fixed.horizontal,
              mpd,
              wibox.widget.systray(),
              mytextclock,
              s.mylayoutbox,
          },
      }
  end)
#+end_src
This is bar theme:
#+begin_src lua :noweb-ref theme/parts
  local function get_bar()
    local r = {
            taglist_fg_focus = cs.black,
            taglist_bg_focus = cs.accent_semi,
            tasklist_fg_normal = cs.white,
            tasklist_fg_focus = cs.accent,
            tasklist_bg_minimize = cs.black_semi,
            tasklist_fg_minimize = cs.grey,
    }

    return r
  end
#+end_src
* Miscellanous
** merge()
#+name: misc/merge
#+begin_src lua
  local function merge(v)
      local r = {}
      for _,t in pairs(v) do
          for k,v in pairs(t) do
              r[k] = v
          end
      end
      return r
  end
#+end_src
#+end_src
