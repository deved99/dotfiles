#+TITLE: Emacs Config
#+PROPERTY: header-args :comments noweb :noweb yes

* Summary üóÇÔ∏è
This Org file is used to generate my Emacs configuration thanks to [[https://orgmode.org/worg/org-contrib/babel/][OrgBabel]] and noweb's syntax. The file is generated from the following snippet, which collects the snippets and puts them in order.
#+begin_src elisp :tangle init.el
  <<prepare/garbage-collection>>
  <<prepare/use-package>>
  <<prepare/general.el>>
  <<prepare/startup-time>>
  <<visual/cleanup>>
  <<visual/keeparound>>
  <<visual/fonts>>
  <<visual/ligatures>>
  <<visual/theme>>
  <<visual/modeline>>
  <<visual/wrap>>
  <<visual/parenthesis>>
  <<interface/vertico>>
  <<interface/which-key>>
  <<evil/main>>
  <<evil/integrations>>
  <<evil/plugins>>
  <<evil/undo>>
  <<note-taking>>
  <<note-taking/roam>>
  <<programming/eglot>>
  <<programming/company>>
  <<programming/magit>>
  <<misc>>
#+end_src
The header arguments tell Emacs the following:
- ~tangle~: defines where Emacs should generate the file.
- ~noweb~: whether to use noweb syntax.
- ~comments~: whether to add comments between snippets.
Also, write ~early-init.el~:
#+begin_src elisp :tangle early-init.el
  (setq package-enable-at-startup nil)
#+end_src
This is needed in Emacs 27+ to prevent ~package.el~ from loading anything.
* Preparation üõ†Ô∏è
** garbage collect
How frequently does Emacs garbage collect:
#+name: prepare/garbage-collection
#+begin_src elisp
  (setq gc-cons-threshold 100000000)
#+end_src
** use-package setup
Bootstrap straight.el:
#+begin_src elisp :noweb-ref prepare/use-package
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src
Install and load ~use-package~:
#+begin_src elisp :noweb-ref prepare/use-package
  (straight-use-package 'use-package)
#+end_src
If a package is specified, install it:
#+begin_src elisp :noweb-ref prepare/use-package
  (setq straight-use-package-by-default t)
#+end_src
Finally, write lockfile:
#+begin_src elisp :noweb-ref prepare/use-package
  (add-hook 'emacs-startup-hook '(lambda () (straight-freeze-versions t)))
#+end_src
** Performance stats
This just shows how much did it take for emacs to start and the number of garbage collections done:
#+name: prepare/startup-time
#+begin_src elisp
(add-hook 'emacs-startup-hook
  (lambda ()
    (message "Emacs ready in %s with %d garbage collections."
      (format "%.2f seconds"
        (float-time
	  (time-subtract after-init-time before-init-time)))
       gcs-done)))
#+end_src
* Aesthetics ‚ú®
** cleanup
I just want to see text, this disable decorations I don't need:
#+begin_src elisp :noweb-ref visual/cleanup
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tooltip-mode 0)
#+end_src
But I want some space around text:
#+begin_src elisp :noweb-ref visual/cleanup
  (fringe-mode 10)
#+end_src
** keep context around cursor
This keeps 5 lines before and after the current line:
#+name: visual/keeparound
#+begin_src elisp
  (setq scroll-margin 5
	scroll-conservatively 10000)
#+end_src
** fonts
Set ~Iosevka~ as default font:
#+begin_src elisp :noweb-ref visual/fonts
  (add-to-list 'default-frame-alist
               '(font . "Iosevka 17"))
#+end_src
Also, add ~Noto Color Emoji~ as fallback font for symbols:
#+begin_src elisp :noweb-ref visual/fonts
  (set-fontset-font 
    t 'symbol (font-spec :family "Noto Color Emoji") nil 'prepend)
#+end_src
Set variable and fixed pitch font:
#+begin_src elisp :noweb-ref visual/fonts
  (set-face-attribute 'fixed-pitch nil
    :font (font-spec :family "Iosevka"))
  (set-face-attribute 'variable-pitch nil
    :font (font-spec :family "Iosevka Alia"))
#+end_src
** theme
This sets the theme: it loads a file, which has been templated
by Ansible. This way every program uses the same colorscheme.
#+name: visual/theme
#+begin_src elisp
  (use-package base16-theme
    :config
    (setq base16-distinct-fringe-background nil)
    (load (concat user-emacs-directory "base16-custom-theme.el"))
    (load-theme 'base16-custom t))
#+end_src
** indent guides
This shows indentations guides in programming languages:
#+name: visual/indent-guides
#+begin_src elisp
(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'column))
#+end_src
Right now disabled: doesn't show on empty lines.
** Line wrapping
This is equivalent to vim's ~set nowrap~. By default truncate lines.
#+begin_src elisp :noweb-ref visual/wrap
  (set-default 'truncate-lines t)
#+end_src
Some modes, org for example, change this default.
** ligatures
These are the used ligatures, disabled 'cause it does not currently support Emacs 27:
#+name: visual/ligatures
#+begin_src elisp :noweb no
  (use-package ligature
    :straight (:host github :repo "mickeynp/ligature.el")
    :config
    (ligature-set-ligatures 't
     '("-->" "//" "<!--" ":=" "->>" "<<-" "->" "<-"
       "<=>" "==" "!=" "<=" ">=" "!==" "||" "..." ".."
       "|||" "///" "===" "++" "--" "=>" "|>" "<|" "||>" "<||"
       "|||>" "<|||" ">>" "<<" "::=" ":?" "!!" "?:" "?." "::"
       "+++" "??" ":::" ".?" "?=" "=!=" "<|>"
       ";;" "<<<" ">>>" "<==" "<==>" "==>" "=>>"
       "<~>" "<~~" "<~" "~~>" "~>" "<->" "^="))
    (global-ligature-mode t))
#+end_src
** modeline
A more minimal modeline:
#+name: visual/modeline
#+begin_src elisp
  (use-package all-the-icons)
  (use-package doom-modeline
    :custom
    (doom-modeline-vcs-max-length 20)
    (doom-modeline-buffer-file-name-style 'buffer-name)
    (doom-modeline-buffer-encoding nil)
    :hook (after-init . doom-modeline-mode))
#+end_src
My old modeline. This can be splitted in two parts, as follow:
#+name: visual/modeline-old
#+begin_src elisp
  <<visual/modeline/functions>>
  <<visual/modeline/main>>
#+end_src
This wraps everything up in the modeline:
#+name: visual/modeline/main
#+begin_src elisp
  (setq-default mode-line-format
		(list
		 " "
		 '(:eval (get_current_state))
		 " | %b"
		 '(:eval (is_modified))
		 " (%m)"))
#+end_src
This outputs the current evil-state:
#+begin_src elisp :noweb-ref visual/modeline/functions
  (defun get_current_state ()
    (cond
     ((eq evil-state 'normal) "NORMAL")
     ((eq evil-state 'insert) "INSERT")
     ((eq evil-state 'visual) "VISUAL")
     ((eq evil-state 'operator) "OPERATOR")
     ((eq evil-state 'replace) "REPLACE")
     ((eq evil-state 'emacs) "EMACS")
     (t "NOT_FOUND")))
#+end_src
This wheter the current buffer has been modified or in read only mode:
#+begin_src elisp :noweb-ref visual/modeline/functions
  (defun is_modified ()
    (cond
     ((buffer-modified-p) "+")
     ((buffer-read-only) "O")
     (t " ")))
#+end_src
** Parenthesis coloring
Color matching parenthesis in different colors:
#+name: visual/parenthesis
#+begin_src elisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode)
    :config
    (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                        :foreground "red"
                        :inherit 'error
                        :box t))
#+end_src
* Workflow üñ•Ô∏è
** Ivy
Change the completion framework in the minibuffer:
#+begin_src elisp :noweb-ref interface/ivy
  (use-package ivy
   :diminish
   :config (ivy-mode))
  <<interface/ivy/plugins>>
#+end_src
Use the above framwork for common operations:
#+begin_src elisp :noweb-ref interface/ivy/plugins
  (use-package counsel
   :diminish
   :config (counsel-mode))
#+end_src
Add more info in ivy buffers:
#+begin_src elisp :noweb-ref interface/ivy/plugins
  (use-package ivy-rich
   :diminish
   :config (ivy-rich-mode 1))
#+end_src
** Vertico
Current framework I'm trying:
#+name: interface/vertico
#+begin_src elisp
  (use-package vertico
    :config (vertico-mode))
  <<interface/vertico/packages>>
#+end_src
Make completion behave more like ivy:
#+begin_src elisp :noweb-ref interface/vertico/packages
  (use-package orderless
    :custom (completion-styles '(orderless basic)))
#+end_src
Similarly to ivy rich, this adds info to completion buffers:
#+begin_src elisp :noweb-ref interface/vertico/packages
  (use-package marginalia
    :config (marginalia-mode))
#+end_src
Add some useful functions related to vertico:
#+begin_src elisp :noweb-ref interface/vertico/packages
  (use-package consult
    :config (df/leader "i" 'consult-outline))
#+end_src
** which-key
~which-key~ adds a mode the shows possible keybindings:
#+name: interface/which-key
#+begin_src elisp
   (use-package which-key
     :custom
     (which-key-delay 2)
     :config (which-key-mode))
#+end_src
** general.el
Install ~general.el~, which provides easier keybinding definition:
#+name: prepare/general.el
#+begin_src elisp
  (use-package general
    :config
    (general-evil-setup)
    (general-create-definer df/leader
      :keymaps '(normal)
      :prefix "SPC"
      :global-prefix "C-SPC")
    <<prepare/general/base>>
  )
#+end_src
These are some keybindindings that are not related to a specific package:
#+begin_src elisp :noweb-ref prepare/general/base
  (df/leader "f" '(:ignore t :which-key "files"))
  (df/leader "fb" '(switch-to-buffer :which-key "Switch to buffer"))
  (df/leader "fB" '(ibuffer-list-buffers :which-key "Open window to manage buffers"))
  (df/leader "ff" '(find-file :which-key "Open file"))
#+end_src
* Editing üêô
** ~evil~ package:
The main piece, ~evil~:
#+name: evil/main
#+begin_src elisp
  (use-package evil
    :after undo-tree
    :init
    <<evil/main/init>>
    :config (evil-mode 1))
#+end_src
Then set ~undo-tree~ as undo system:
#+begin_src elisp :noweb-ref evil/main/init
    (require 'undo-tree)
    (setq evil-undo-system 'undo-tree)
    (setq evil-undo-function 'undo-tree-undo)
    (setq evil-redo-function 'undo-tree-redo)
#+end_src
Set variables needed by evil-collections:
#+begin_src elisp :noweb-ref evil/main/init
    (setq evil-want-keybinding nil
	  evil-want-integration t)
#+end_src
Don't print the current mode:
#+begin_src elisp :noweb-ref evil/main/init
    (setq evil-echo-state nil)
#+end_src
Move by visual lines:
#+begin_src elisp :noweb-ref evil/main/init
  (defun evil-next-line--check-visual-line-mode (orig-fun &rest args)
    (if visual-line-mode
        (apply 'evil-next-visual-line args)
      (apply orig-fun args)))

  (advice-add 'evil-next-line :around 'evil-next-line--check-visual-line-mode)

  (defun evil-previous-line--check-visual-line-mode (orig-fun &rest args)
    (if visual-line-mode
        (apply 'evil-previous-visual-line args)
      (apply orig-fun args)))

  (advice-add 'evil-previous-line
    :around 'evil-previous-line--check-visual-line-mode)
#+end_src
** evil integrations
This is a collections of various integrations:
#+begin_src elisp :noweb-ref evil/integrations
(use-package evil-collection
  :after evil
  :init (evil-collection-init))
#+end_src
And this is an integration for Org-mode:
#+begin_src elisp :noweb-ref evil/integrations
(use-package evil-org
  :hook (org-mode . evil-org-mode)
  :init <<evil/integrations/options>>
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src
This options makes ~0~ ignore leading asterisks:
#+begin_src elisp :noweb-ref evil/integrations/options
(setq org-special-ctrl-a/e t)
#+end_src
** vim plugins
This is for a way faster way to change surrounding like parenthesis:
#+begin_src elisp :noweb-ref evil/plugins
(use-package evil-surround
  :after evil
  :config (global-evil-surround-mode 1))
#+end_src
And this is for commenting portions of code:
#+begin_src elisp :noweb-ref evil/plugins
(use-package evil-commentary
  :after evil
  :config (evil-commentary-mode))
#+end_src
This adds indentation based text object:
#+begin_src elisp :noweb-ref evil/plugins
(use-package evil-indent-plus
  :after evil
  :init (evil-indent-plus-default-bindings))
#+end_src
Vi-like number controlling:
#+begin_src elisp :noweb-ref evil/plugins
  (use-package evil-numbers
    :after evil
    :config
    (evil-define-key '(normal visual) 'global (kbd "SPC +") 'evil-numbers/inc-at-pt)
    (evil-define-key '(normal visual) 'global (kbd "SPC -") 'evil-numbers/dec-at-pt))
#+end_src
** undo
This is the undo system I use; it also provides a nice visualization of the undo-tree.
#+name: evil/undo
#+begin_src elisp
  (use-package undo-tree
    :init
    <<evil/undo/init>>
    :config (global-undo-tree-mode))
#+end_src
Set where should it save files:
#+begin_src elisp :noweb-ref evil/undo/init
  (setq undo-dir "/home/davide/.config/emacs/undo"
        undo-tree-history-directory-alist `(("." . ,undo-dir)))
#+end_src
Set keybinding for the visualizer:
#+begin_src elisp :noweb-ref evil/undo/init
  (df/leader "u" 'undo-tree-visualize)
#+end_src
** Regular Expressions
Testing this:
#+begin_src elisp
(use-package visual-regexp-steroids)
#+end_src
* Note taking üìù
** Org Mode: options
Use org-mode from elpa:
#+name: note-taking
#+begin_src elisp
  <<org/plugins>>
  (use-package org
    :custom
    <<org/options>>
    <<org/keywords>>
    :init
    <<org/keybindings>>
    :straight (:type built-in))
  <<org/tempo>>
  <<org/beautify>>
#+end_src
Generic option:
- ~org-ellipsis~: substitute character used by OrgMode to indicate that an headline is not empty.
- ~org-startup-folded~: tell OrgMode to collapse heading on startup.
#+begin_src elisp :noweb-ref org/options
  (org-ellipsis " ‚ñæ")
  (org-startup-folded t)
  (org-export-backends '(html latex ox-gfm))
#+end_src
Keybindings I use:
#+begin_src elisp :noweb-ref org/keybindings
  (df/leader "o" '(:ignore t :which-key "org-mode")
             "ob" 'org-babel-tangle
             ; "oc" 'org-toggle-checkbox
             "op" 'org-priority
             "od" '(:ignore t :which-key "date")
             "odc" 'org-date-from-calendar
             "ods" 'org-schedule
             "odd" 'org-deadline)
#+end_src
Add keywords and tags:
#+begin_src elisp :noweb-ref org/keywords
  (org-todo-keywords '("ACTIVE" "TODO" "NEXT" "WAIT" "|" "DONE" "CANC"))
  (org-tag-alist '(("@w") ("@h") ("@t") ("idea")))
  (org-tags-column 0)
#+end_src
Faster insertion of code blocks:
#+begin_src elisp :noweb-ref org/tempo
  (use-package org-tempo
    :straight (:type built-in)
    :config
    (add-to-list 'org-structure-template-alist '("el" . "src elisp"))
    (add-to-list 'org-structure-template-alist '("sh" . "src bash"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src
This makes ~<el TAB~ insert an elisp code block.
** Org Mode: plugins
Download Github flavored Markdown exporter and define the exports backends I use:
#+begin_src elisp :noweb-ref org/plugins
(use-package ox-gfm)
#+end_src
** Org Mode: beautify
Org mode is treated in a special way:
#+begin_src elisp :noweb-ref org/beautify
  <<org/beautify/plugins>>
  <<org/faces>>
  (defun df/org-mode-beautify ()
    ;; use proportional font
    (variable-pitch-mode)
    ;; change symbol appearence
    (org-appear-mode t)
    (org-superstar-mode t)
    ;; Resize buffer
    (visual-line-mode t)
    (adaptive-wrap-prefix-mode t)
    (visual-fill-column-mode t))
  <<org/beautify/packages>>
  (add-hook 'org-mode-hook 'df/org-mode-beautify)
#+end_src
Below etc
*** Faces
These are custom faces that, in my opinion, give Org a cleaner look:
- Blocks of code in fixed pitch and background change:
  #+begin_src elisp :noweb-ref org/faces
    (set-face-attribute 'org-block nil
      :foreground nil
      :extend t
      :inherit 'fixed-pitch)
    (set-face-attribute 'org-block-begin-line nil
      :extend t
      :inherit 'fixed-pitch)
  #+end_src
- Tables with fixed pitch:
  #+begin_src elisp :noweb-ref org/faces
    (set-face-attribute 'org-table nil
      :inherit '(shadow fixed-pitch))
  #+end_src
- Some styles in text
  #+begin_src elisp :noweb-ref org/faces
    (set-face-attribute 'org-code nil
      :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-formula nil
      :inherit 'fixed-pitch)
    (set-face-attribute 'org-verbatim nil
      :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-checkbox nil
      :inherit 'fixed-pitch)
  #+end_src
- Keywords:
  #+begin_src elisp :noweb-ref org/faces
   (set-face-attribute 'org-special-keyword nil
     :inherit '(font-lock-comment-face fixed-pitch))
   (set-face-attribute 'org-todo nil
     :inherit 'fixed-pitch
     :weight 'normal
     :foreground (plist-get base16-custom-colors :base07)
     :background (plist-get base16-custom-colors :base08))
   (set-face-attribute 'org-done nil
     :inherit 'fixed-pitch
     :weight 'normal
     :foreground (plist-get base16-custom-colors :base07)
     :background (plist-get base16-custom-colors :base0B))
  (set-face-attribute 'org-tag nil
    :foreground (plist-get base16-custom-colors :base02))
#+end_src
*** Plugins
I don't like text spanning from the beginning to the end of the screen. The first package adjusts margins to fix this, while the second package makes wrapping smarter. Visual explanation [[https://codeberg.org/joostkremers/visual-fill-column][here]].
#+begin_src elisp :noweb-ref org/beautify/plugins
  (use-package visual-fill-column
    :custom
    (visual-fill-column-width 100)
    (visual-fill-column-center-text t)
    (truncate-lines nil))
  (use-package adaptive-wrap)
#+end_src
Change header and list dots style:
#+begin_src elisp :noweb-ref org/beautify/plugins
  (use-package org-superstar
     :init (setq org-superstar-remove-leading-stars t))
#+end_src
Hide most markup symbols:
#+begin_src elisp :noweb-ref org/beautify/plugins
  (use-package org-appear
    :init (setq org-hide-emphasis-markers t))
#+end_src
As a reminder, package to automatically render latex fragments when the cursor is away:
#+begin_src elisp
  (use-package org-fragtog
    :straight (:host github :repo "io12/org-fragtog"))
#+end_src
** Org Mode: roam
Package:
#+name: note-taking/roam
#+begin_src elisp
  (use-package org-roam
    :config
    (org-roam-db-autosync-mode)
    (df/leader "w" '(:ignore t :which-key "wiki")
               "ww" 'org-roam-node-find)
    :custom
    (org-roam-directory "~/Notes/wiki")
    (org-roam-completion-everywhere t))
#+end_src
** Test
#+begin_src elisp
  (dolist (msg '("a" "b"))
    (message msg))
#+end_src
* Programming ‚öóÔ∏è
** eglot
Currently trying eglot:
#+name: programming/eglot
#+begin_src elisp
  (use-package eglot)
  <<programming/eglot/keybindings>>
#+end_src
Keybinding I'm using:
#+begin_src elisp :noweb-ref programming/eglot/keybindings
  (df/leader "p" '(:ignore t :which-key "LSP")
             "pr" 'eglot-rename
             "pc" 'flymake-show-buffer-diagnostics)
#+end_src
** completion framework
This is the completion engine, hooked up to lsp-mode:
#+name: programming/company
#+begin_src elisp
  (use-package company
    :hook ((after-init . global-company-mode)
           (prog-mode . (lambda () (setq-local company-idle-delay 0.4))))
    :general
    (general-imap "C-n" 'company-select-next
                  "C-p" 'company-select-previous)
    :config
    (setq company-selection-wrap-around t
          company-minimum-prefix-length 1
          company-idle-delay nil)
    (company-tng-configure-default))
  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src
** magit
This is a git client I want to test:
#+name: programming/magit
#+begin_src elisp
    (use-package magit
      :config (df/leader "g" 'magit))
#+end_src
* Miscellaneous üóÉÔ∏è
** todo file
I like using a TODO file, which keeps track of what I'm doing and what I have to do:
#+begin_src elisp :noweb-ref misc
  (setq inhibit-startup-screen t
        initial-buffer-choice "~/current.org")
#+end_src
** autoclose parenthesis
Autoclose parenthesis, quotation marks, etc:
#+begin_src elisp :noweb-ref misc
  (electric-pair-mode)
  (add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src
The hook inhibits pairing of ~<~ in org-mode, since it is used for ~org-tempo~.
** backup
Sets where to save backup and auto-save dir.
#+begin_src elisp :noweb-ref misc
  (setq backup-dir (concat user-emacs-directory "backups")
        backup-directory-alist `(("." . ,backup-dir))
        auto-save-file-name-transforms `((".*" ,backup-dir t)))
#+end_src
** no tab please
Never insert tabs:
#+begin_src elisp :noweb-ref misc
(setq-default indent-tabs-mode nil)
#+end_src
** rainbow-mode
This shows a color preview inside Emacs for strings like #FF0000
#+begin_src elisp :noweb-ref misc
  (use-package rainbow-mode)
#+end_src
** additional filetypes
Miscellanous syntax highlight:
#+begin_src elisp :noweb-ref misc
  (use-package php-mode)
  (use-package rust-mode)
  (use-package lua-mode)
  (use-package json-mode)
  (use-package yaml-mode)
  (use-package dockerfile-mode)
#+end_src
Better pdf viewer, disabled since not optimal yet:
#+begin_src elisp
  (use-package pdf-tools)
#+end_src
Plantuml support, used to create nice graphs:
#+begin_src elisp :noweb-ref misc
  (use-package plantuml-mode
  :init
  (setq plantuml-executable-path "/usr/bin/plantuml"
        plantuml-default-exec-mode 'executable)
  (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
  ;; Org-mode
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t))))
#+end_src
Markdown syntax-higlight plus some functions:
#+begin_src elisp :noweb-ref misc
  (use-package markdown-mode
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))
  (use-package edit-indirect)
#+end_src
** Visit symlinks to file under git
Follow link by default
#+begin_src elisp :noweb-ref misc
  (setq vc-follow-symlinks t)
#+end_src
