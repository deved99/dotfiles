#+TITLE: Emacs Config

* Summary
This org file is used to generate my emacs config. It contains various
named snippets (and their reasoning), which are organized by the
following snippet. More specifically, it defines which snippets to
include and where to put them.
#+begin_src elisp :tangle init.el :noweb yes :comments noweb
  <<prepare/garbage-collection>>
  <<prepare/use-package>>
  <<prepare/startup-time>>
  <<visual/cleanup>>
  <<visual/keeparound>>
  <<visual/fonts>>
  <<visual/theme>>
  <<visual/modeline>>
  <<visual/parenthesis>>
  <<evil/main>>
  <<evil/integrations>>
  <<evil/plugins>>
  <<evil/undo>>
  <<org/main>>
  <<org/plugins>>
  <<misc>>
#+end_src
The header arguments tell Emacs the following:
- ~tangle~: defines where Emacs should generate the file.
- ~noweb~: whether to use noweb syntax.
- ~comments~: whether to add comments between snippets.
* prepare
** garbage collect
How frequently does Emacs garbage collect:
#+name: prepare/garbage-collection
#+begin_src elisp
  (setq gc-cons-threshold 100000000)
#+end_src
** use-package setup
Do not load ~package.el~:
#+begin_src elisp :noweb-ref prepare/use-package
  (setq package-enable-at-startup nil)
#+end_src
Bootstrap straight.el:
#+begin_src elisp :noweb-ref prepare/use-package
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src
Install and load ~use-package~:
#+begin_src elisp :noweb-ref prepare/use-package
  (straight-use-package 'use-package)
#+end_src
If a package is specified, install it:
#+begin_src elisp :noweb-ref prepare/use-package
  (setq straight-use-package-by-default t)
#+end_src
** Performance stats
This just shows how much did it take for emacs to start and the number of garbage collections done:
#+name: prepare/startup-time
#+begin_src elisp
(add-hook 'emacs-startup-hook
  (lambda ()
    (message "Emacs ready in %s with %d garbage collections."
      (format "%.2f seconds"
        (float-time
	  (time-subtract after-init-time before-init-time)))
       gcs-done)))
#+end_src
* visual
** cleanup
I just want to see text, this disable decorations I don't need:
#+begin_src elisp :noweb-ref visual/cleanup
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tooltip-mode 0)
#+end_src
But I want some space around text:
#+begin_src elisp :noweb-ref visual/cleanup
  (fringe-mode 10)
#+end_src
This is equivalent to vim's ~set nowrap~:
#+begin_src elisp :noweb-ref visual/cleanup
    (set-default 'truncate-lines t)
#+end_src
** keep context around cursor
This keeps 5 lines before and after the current line:
#+name: visual/keeparound
#+begin_src elisp
  (setq scroll-margin 5
	scroll-conservatively 10000)
#+end_src
** fonts
As for fonts, I use [[https://www.jetbrains.com/lp/mono/][JetBrains Mono]] and ~Noto Color Emoji~ for emojis:
#+name: visual/fonts
#+begin_src elisp
    (add-to-list 'default-frame-alist
		 '(font . "JetBrains Mono 15"))
    (set-fontset-font t 'symbol "Noto Color Emoji" nil 'append)
#+end_src
** theme
This generates themes from a base16 theme:
#+name: visual/theme
#+begin_src elisp
(use-package base16-theme
  :config
  (setq base16-distinct-fringe-background nil)
  (load-theme 'base16-google-dark t))
#+end_src
** indent guides
This shows indentations guides in programming languages:
#+name: visual/indent-guides
#+begin_src elisp
(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'column))
#+end_src
Right now disabled: doesn't show on empty lines.
** ligatures
These are the used ligatures, disabled 'cause it does not currently support Emacs 27:
#+name: visual/ligatures
#+begin_src elisp
  (use-package ligature
    :straight (:host github :repo "mickeynp/ligature.el")
    :config
    (ligature-set-ligatures 't '("www"))
    (ligature-set-ligatures
     'prog-mode
     '("-->" "//" "/**" "/*" "*/" "<!--" ":=" "->>" "<<-" "->" "<-"
       "<=>" "==" "!=" "<=" ">=" "=:=" "!==" "&&" "||" "..." ".."
       "|||" "///" "&&&" "===" "++" "--" "=>" "|>" "<|" "||>" "<||"
       "|||>" "<|||" ">>" "<<" "::=" "|]" "[|" "{|" "|}"
       "[<" ">]" ":?>" ":?" "/=" "[||]" "!!" "?:" "?." "::"
       "+++" "??" "###" "##" ":::" "####" ".?" "?=" "=!=" "<|>"
       "<:" ":<" ":>" ">:" "<>" "***" ";;" "/==" ".=" ".-" "__"
       "=/=" "<-<" "<<<" ">>>" "<=<" "<<=" "<==" "<==>" "==>" "=>>"
       ">=>" ">>=" ">>-" ">-" "<~>" "-<" "-<<" "=<<" "---" "<-|"
       "<=|" "/\\" "\\/" "|=>" "|~>" "<~~" "<~" "~~" "~~>" "~>"
       "<$>" "<$" "$>" "<+>" "<+" "+>" "<*>" "<*" "*>" "</>" "</" "/>"
       "<->" "..<" "~=" "~-" "-~" "~@" "^=" "-|" "_|_" "|-" "||-"
       "|=" "||=" "#{" "#[" "]#" "#(" "#?" "#_" "#_(" "#:" "#!" "#="
       "&="))
    (global-ligature-mode t))
#+end_src
** modeline
This can be splitted in two parts, as follow:
#+name: visual/modeline
#+begin_src elisp :noweb yes
  <<visual/modeline/functions>>
  <<visual/modeline/main>>
#+end_src
This wraps everything up in the modeline:
#+name: visual/modeline/main
#+begin_src elisp
  (setq-default mode-line-format
		(list
		 " "
		 '(:eval (get_current_state))
		 " | %b"
		 '(:eval (is_modified))
		 " (%m)"))
#+end_src
This outputs the current evil-state:
#+begin_src elisp :noweb-ref visual/modeline/functions
  (defun get_current_state ()
    (cond
     ((eq evil-state 'normal) "NORMAL")
     ((eq evil-state 'insert) "INSERT")
     ((eq evil-state 'visual) "VISUAL")
     ((eq evil-state 'operator) "OPERATOR")
     ((eq evil-state 'replace) "REPLACE")
     ((eq evil-state 'emacs) "EMACS")
     (t "NOT_FOUND")))
#+end_src
This wheter the current buffer has been modified or in read only mode:
#+begin_src elisp :noweb-ref visual/modeline/functions
  (defun is_modified ()
    (cond
     ((buffer-modified-p) "+")
     ((buffer-read-only) "O")
     (t " ")))
#+end_src
** Parenthesis coloring
Color matching parenthesis in different colors:
#+name: visual/parenthesis
#+begin_src elisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode)
    :config
    (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                        :foreground "red"
                        :inherit 'error
                        :box t))
#+end_src
* evil-mode
** ~evil~ package:
The main piece, ~evil~:
#+name: evil/main
#+begin_src elisp :noweb yes
  (use-package evil
    :after undo-tree
    :init
    <<evil/main/init>>
    :config (evil-mode 1))
#+end_src
Then set ~undo-tree~ as undo system:
#+begin_src elisp :noweb-ref evil/main/init
    (require 'undo-tree)
    (setq evil-undo-system 'undo-tree)
    (setq evil-undo-function 'undo-tree-undo)
    (setq evil-redo-function 'undo-tree-redo)
#+end_src
Set variables needed by evil-collections:
#+begin_src elisp :noweb-ref evil/main/init
    (setq evil-want-keybinding nil
	  evil-want-integration t)
#+end_src
Don't print the current mode:
#+begin_src elisp :noweb-ref evil/main/init
    (setq evil-echo-state nil)
#+end_src
** evil integrations
This is a collections of various integrations:
#+begin_src elisp :noweb-ref evil/integrations
(use-package evil-collection
  :after evil
  :init (evil-collection-init))
#+end_src
And this is an integration for Org-mode:
#+begin_src elisp :noweb yes :noweb-ref evil/integrations
(use-package evil-org
  :hook (org-mode . evil-org-mode)
  :init <<evil/integrations/options>>
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src
This options makes ~0~ ignore leading asterisks:
#+begin_src elisp :noweb-ref evil/integrations/options
(setq org-special-ctrl-a/e t)
#+end_src
** vim plugins
This is for a way faster way to change surrounding like parenthesis:
#+begin_src elisp :noweb-ref evil/plugins
(use-package evil-surround
  :after evil
  :config (global-evil-surround-mode 1))
#+end_src
And this is for commenting portions of code:
#+begin_src elisp :noweb-ref evil/plugins
(use-package evil-commentary
  :after evil
  :config (evil-commentary-mode))
#+end_src
This adds indentation based text object:
#+begin_src elisp :noweb-ref evil/plugins
(use-package evil-indent-plus
  :after evil
  :init (evil-indent-plus-default-bindings))
#+end_src
Vi-like number controlling:
#+begin_src elisp :noweb-ref evil/plugins
  (use-package evil-numbers
    :after evil
    :config
    (evil-define-key '(normal visual) 'global (kbd "SPC +") 'evil-numbers/inc-at-pt)
    (evil-define-key '(normal visual) 'global (kbd "SPC -") 'evil-numbers/dec-at-pt))
#+end_src
** undo
This is the undo system I use; it also provides a nice visualization of the undo-tree.
#+name: evil/undo
#+begin_src elisp :noweb yes
  (use-package undo-tree
    :init
    <<evil/undo/init>>
    :config (global-undo-tree-mode))
#+end_src
Set where should it save files:
#+begin_src elisp :noweb-ref evil/undo/init
    ;; (setq undo-tree-auto-save-history (concat user-emacs-directory "undo"))
#+end_src
* org-mode
Use org-mode from elpa:
#+begin_src elisp :noweb-ref org/main :noweb yes
(use-package org
  :init
  <<org/options>>)
#+end_src
Some visual options:
#+begin_src elisp :noweb-ref org/options
(setq org-hide-leading-stars t
      org-startup-folded t)
#+end_src
Code block background fills the whole line:
#+begin_src elisp :noweb-ref org/options
(set-face-attribute 'org-block nil :extend t)
(set-face-attribute 'org-block-begin-line nil :extend t)
#+end_src
Download Github flavored Markdown exporter and define the exports backends I use:
#+begin_src elisp :noweb-ref org/plugins
(use-package ox-gfm)
(setq org-export-backends '(html latex ox-gfm))
#+end_src
Conceal some stuff:
#+begin_src elisp :noweb-ref org/plugins
(use-package org-appear
  :hook (org-mode . org-appear-mode)
  :init (setq org-hide-emphasis-markers t))
#+end_src
Automatic preview of LaTeX fragments:
#+begin_src elisp :noweb-ref org/plugins
  (use-package org-fragtog
    :straight (:host github :repo "io12/org-fragtog")
    :hook (org-mode . org-fragtog-mode))
#+end_src
Change look of headers:
#+begin_src elisp :noweb-ref org/plugins
  (use-package org-superstar
     :init (setq org-superstar-remove-leading-stars t)
     :hook (org-mode . org-superstar-mode))
#+end_src
* lsp-mode
** main package
This enables [[https://github.com/Microsoft/language-server-protocol][LSP]], which provides completions, diagnostics et cetera:
#+begin_src elisp
  (use-package lsp-mode
#+end_src
Hook it to any programming filetype:
#+begin_src elisp :padline no
    :hook prog-mode
#+end_src
Disable icons in completions:
#+begin_src elisp :padline no
    :init (setq lsp-headerline-breadcrumb-enable nil)
#+end_src
Disable diagnostics; I'd prefer to be able to toggle it or to disable it while in insert mode:
#+begin_src elisp :padline no
    (setq lsp-diagnostics-mode ":none"))
#+end_src
** lsp-ui
This manages the look of LSP:
#+begin_src elisp
  (use-package lsp-ui
    :config
#+end_src
Disable some stuff; I have to find an alternative solution in the future:
#+begin_src elisp :padline no
    (setq lsp-ui-doc-enable nil
	  lsp-ui-sideline-show-code-actions nil)
#+end_src
Enable showing info on the right of the screen:
#+begin_src elisp :padline no
    (setq lsp-ui-sideline-show-hover t
	  lsp-ui-sideline-delay 1))
#+end_src
** completion engine
This is the completion engine, hooked up to lsp-mode:
#+begin_src elisp
  (use-package company
    :hook (lsp-mode . company-mode)
#+end_src
Loop after the last entry:
#+begin_src elisp :padline no
  :config
  (setq company-selection-wrap-around t)
#+end_src
Then enable it:
#+begin_src elisp :padline no
  (company-tng-configure-default))
#+end_src
** magit
This is a git client I want to test:
#+begin_src elisp
  (use-package magit)
#+end_src
** lsp servers
Pyright, an LSP server for Python:
#+begin_src elisp
  (use-package lsp-pyright)
#+end_src
* misc
** todo file
I like using a TODO file, which keeps track of what I'm doing and what I have to do:
#+begin_src elisp :noweb-ref misc
  (setq inhibit-startup-screen t
        initial-buffer-choice "~/current.org")
#+end_src
** autoclose parenthesis
Autoclose parenthesis, quotation marks, etc:
#+begin_src elisp :noweb-ref misc
  (electric-pair-mode)
#+end_src
** backup
Sets where to save backup files. Backup always gud.
#+begin_src elisp :noweb-ref misc
  (setq backup-dir (concat user-emacs-directory "backups")
	backup-directory-alist `(("." . ,backup-dir))
	auto-save-file-name-transforms `((".*", backup-dir t)))
#+end_src
** no tab please
Never insert tabs:
#+begin_src elisp :noweb-ref misc
(setq-default indent-tabs-mode nil)
#+end_src
** rainbow-mode
This shows a color preview inside Emacs for strings like #FF0000
#+begin_src elisp :noweb-ref misc
  (use-package rainbow-mode)
#+end_src
** additional filetypes
Miscellanous syntax highlight:
#+begin_src elisp :noweb-ref misc
  (use-package php-mode)
  (use-package rust-mode)
  (use-package lua-mode)
  (use-package json-mode)
  (use-package yaml-mode)
  (use-package dockerfile-mode)
#+end_src
Better pdf viewer, disabled since not optimal yet:
#+begin_src elisp
  (use-package pdf-tools)
#+end_src
Plantuml support, used to create nice graphs:
#+begin_src elisp :noweb-ref misc
  (use-package plantuml-mode
  :init
  (setq plantuml-executable-path "/usr/bin/plantuml"
        plantuml-default-exec-mode 'executable)
  (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
  ;; Org-mode
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t))))
#+end_src
Markdown syntax-higlight plus some functions:
#+begin_src elisp :noweb-ref misc
  (use-package markdown-mode
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))
  (use-package edit-indirect)
#+end_src
** Visit symlinks to file under git
Follow link by default
#+begin_src elisp :noweb-ref misc
  (setq vc-follow-symlinks t)
#+end_src
