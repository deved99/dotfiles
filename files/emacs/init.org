#+TITLE: Emacs Config
#+PROPERTY: header-args :comments noweb :noweb yes

* Summary üóÇÔ∏è
This Org file is used to generate my Emacs configuration thanks to [[https://orgmode.org/worg/org-contrib/babel/][OrgBabel]] and noweb's syntax. The file is generated from the following snippet, which collects the snippets and puts them in order.
#+begin_src elisp :tangle init.el
  <<prepare/garbage-collection>>
  <<prepare/suppress-warnings>>
  <<prepare/exec-path>>
  <<prepare/package.el>>
  <<prepare/general.el>>
  <<prepare/startup-time>>
  <<visual/cleanup>>
  <<visual/keeparound>>
  <<visual/fonts>>
  <<visual/theme>>
  <<visual/modeline>>
  <<visual/parenthesis>>
  <<interface/vertico>>
  <<interface/which-key>>
  <<evil/main>>
  <<evil/integrations>>
  <<evil/plugins>>
  <<evil/undo>>
  <<note-taking>>
  <<note-taking/roam>>
  <<programming/lsp>>
  <<programming/langs>>
  <<programming/company>>
  <<programming/magit>>
  <<misc>>
#+end_src
The header arguments tell Emacs the following:
- ~tangle~: defines where Emacs should generate the file.
- ~noweb~: whether to use noweb syntax.
- ~comments~: whether to add comments between snippets.
This is needed in Emacs 27+ to prevent ~package.el~ from loading anything.
There's also another snippet generated from this Org file, which is the shell side configuration of vterm:
#+begin_src bash :tangle no
<<vterm/bash-index>>
#+end_src
Disable ~package.el~, write ~early-init.el~, used when using ~straight.el~:
#+begin_src elisp
  (setq package-enable-at-startup nil)
#+end_src
* Preparation üõ†Ô∏è
** garbage collect
How frequently does Emacs garbage collect:
#+name: prepare/garbage-collection
#+begin_src elisp
  (setq gc-cons-threshold 100000000)
#+end_src
** Suppress compilation messages
#+begin_src elisp :noweb-ref prepare/suppress-warnings
  '(warning-suppress-types '((comp)))
#+end_src
** use-package setup (~straight.el~)
Bootstrap straight.el:
#+begin_src elisp :noweb-ref prepare/straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src
Install and load ~use-package~:
#+begin_src elisp :noweb-ref prepare/straight.el
  (straight-use-package 'use-package)
#+end_src
If a package is specified, install it:
#+begin_src elisp :noweb-ref prepare/straight.el
  (setq straight-use-package-by-default t)
#+end_src
Finally, write lockfile:
#+begin_src elisp :noweb-ref prepare/straight.el
  (add-hook 'emacs-startup-hook '(lambda () (straight-freeze-versions t)))
#+end_src
** use-package setup (~package.el~)
Add Melpa repository:
#+begin_src elisp :noweb-ref prepare/package.el
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+end_src
Install ~use-package~ if not installed:
#+begin_src elisp :noweb-ref prepare/package.el
  (eval-when-compile
    (unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package))
    (require 'use-package))
#+end_src
And install every specified package:
#+begin_src elisp :noweb-ref prepare/package.el
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src
** Performance stats
This just shows how much did it take for emacs to start and the number of garbage collections done:
#+name: prepare/startup-time
#+begin_src elisp
(add-hook 'emacs-startup-hook
  (lambda ()
    (message "Emacs ready in %s with %d garbage collections."
      (format "%.2f seconds"
        (float-time
	  (time-subtract after-init-time before-init-time)))
       gcs-done)))
#+end_src
** ~.local/bin~ in ~exec-path~
Add the local bin directory to ~$PATH~:
#+name: prepare/exec-path
#+begin_src elisp
  (add-to-list 'exec-path "~/.local/bin")
#+end_src
* Aesthetics ‚ú®
** cleanup
I just want to see text, this disable decorations I don't need:
#+begin_src elisp :noweb-ref visual/cleanup
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tooltip-mode 0)
#+end_src
But I want some space around text:
#+begin_src elisp :noweb-ref visual/cleanup
  (fringe-mode 10)
#+end_src
** keep context around cursor
This keeps 5 lines before and after the current line:
#+name: visual/keeparound
#+begin_src elisp
  (setq scroll-margin 5
	scroll-conservatively 10000)
#+end_src
** fonts
Set ~Fira Code~ as default font:
#+begin_src elisp
  (add-to-list 'default-frame-alist
               '(font . "Fira Code 11"))
#+end_src
Also, add ~Noto Color Emoji~ as fallback font for symbols:
#+begin_src elisp :noweb-ref visual/fonts
  (set-fontset-font 
    t 'symbol (font-spec :family "Noto Color Emoji") nil 'prepend)
#+end_src
Set variable and fixed pitch font:
#+begin_src elisp :noweb-ref visual/fonts
  (set-face-attribute 'fixed-pitch nil
    :font (font-spec :family "Fira Code"))
#+end_src
** theme
If this file exists, load it, otherwise load a dark theme:
#+name: visual/theme
#+begin_src elisp
  (if (file-exists-p (concat user-emacs-directory "theme.el"))
      (load-file (concat user-emacs-directory "theme.el"))
      (load-theme 'modus-vivendi t))
#+end_src
** ligatures
These are the used ligatures, disabled 'cause it does not currently support Emacs 27:
#+name: visual/ligatures
#+begin_src elisp :noweb no
  (use-package ligature
    :straight (:host github :repo "mickeynp/ligature.el")
    :config
    (ligature-set-ligatures 't
     '("-->" "//" "<!--" ":=" "->>" "<<-" "->" "<-"
       "<=>" "==" "!=" "<=" ">=" "!==" "||" "..." ".."
       "|||" "///" "===" "++" "--" "---" "=>" "|>" "<|" "||>" "<||"
       "|||>" "<|||" ">>" "<<" "::=" ":?" "!!" "?:" "?." "::"
       "+++" "??" ":::" ".?" "?=" "=!=" "<|>"
       ";;" "<<<" ">>>" "<==" "<==>" "==>" "=>>"
       "<~>" "<~~" "<~" "~~>" "~>" "<->" "^="))
    (global-ligature-mode t))
#+end_src
** modeline
Modeline I'm using:
#+name: visual/modeline
#+begin_src elisp
  (use-package all-the-icons)
  (use-package doom-modeline
    :custom
    (doom-modeline-vcs-max-length 20)
    (doom-modeline-buffer-file-name-style 'buffer-name)
    (doom-modeline-buffer-encoding nil)
    :hook (after-init . doom-modeline-mode))
#+end_src
** Parenthesis coloring
Color matching parenthesis in different colors:
#+name: visual/parenthesis
#+begin_src elisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode)
    :config
    (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                        :foreground "red"
                        :inherit 'error
                        :box t))
#+end_src
* Workflow üñ•Ô∏è
** Vertico
Current framework I'm trying:
#+name: interface/vertico
#+begin_src elisp
  (use-package vertico
    :config (vertico-mode))
  <<interface/vertico/packages>>
#+end_src
Make completion behave more like ivy:
#+begin_src elisp :noweb-ref interface/vertico/packages
  (use-package orderless
    :custom (completion-styles '(orderless basic)))
#+end_src
Similarly to ivy rich, this adds info to completion buffers:
#+begin_src elisp :noweb-ref interface/vertico/packages
  (use-package marginalia
    :config (marginalia-mode))
#+end_src
Add some useful functions related to vertico:
#+begin_src elisp :noweb-ref interface/vertico/packages
  (use-package consult
    :config (df/leader "i" 'consult-outline))
#+end_src
** which-key
~which-key~ adds a mode the shows possible keybindings:
#+name: interface/which-key
#+begin_src elisp
   (use-package which-key
     :custom
     (which-key-delay 2)
     :config (which-key-mode))
#+end_src
** general.el
Install ~general.el~, which provides easier keybinding definition:
#+name: prepare/general.el
#+begin_src elisp
  (use-package general
    :config
    (general-evil-setup)
    (general-create-definer df/leader
      :keymaps '(normal)
      :prefix "SPC"
      :global-prefix "C-SPC")
    <<prepare/general/base>>
  )
#+end_src
These are some keybindindings that are not related to a specific package:
#+begin_src elisp :noweb-ref prepare/general/base
  (df/leader "f" '(:ignore t :which-key "files")
             "fb" '(switch-to-buffer :which-key "Switch to buffer")
             "fB" '(ibuffer :which-key "Open window to manage buffers")
             "ff" '(find-file :which-key "Open file")
             "e" 'make-frame-command)
#+end_src
** vterm
Testing this terminal:
#+begin_src elisp :noweb-ref interface/vterm
  (use-package multi-vterm
     :custom (vterm-max-scrollback 100000)
     :config
     (df/leader "s" 'multi-vterm
                "S" 'multi-vterm-rename-buffer))
#+end_src
Add cmake,libtool-bin to install in config.
Vterm requires some shell side configurations:
#+name: vterm/bash-index
#+begin_src bash
  <<vterm/printf>>
  <<vterm/directory-tracking>>
#+end_src
This function is used to pass messages between vterm and Emacs:
#+begin_src bash :noweb-ref vterm/printf
  vterm_printf(){
      if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ] ); then
          # Tell tmux to pass the escape sequences through
          printf "\ePtmux;\e\e]%s\007\e\\" "$1"
      elif [ "${TERM%%-*}" = "screen" ]; then
          # GNU screen (screen, screen-256color, screen-256color-bce)
          printf "\eP\e]%s\007\e\\" "$1"
      else
          printf "\e]%s\e\\" "$1"
      fi
  }
#+end_src
Directory tracking:
#+begin_src bash :noweb-ref vterm/directory-tracking
  vterm_prompt_end(){
      vterm_printf "51;A$(whoami)@$(hostname):$(pwd)"
  }
  PS1=$PS1'\[$(vterm_prompt_end)\]'
#+end_src
* Editing üêô
** ~evil~ package:
The main piece, ~evil~:
#+name: evil/main
#+begin_src elisp
  (use-package evil
    :after undo-tree
    :init
    <<evil/main/init>>
    :config (evil-mode 1))
#+end_src
Then set ~undo-tree~ as undo system:
#+begin_src elisp :noweb-ref evil/main/init
    (require 'undo-tree)
    (setq evil-undo-system 'undo-tree)
    (setq evil-undo-function 'undo-tree-undo)
    (setq evil-redo-function 'undo-tree-redo)
#+end_src
Set variables needed by evil-collections:
#+begin_src elisp :noweb-ref evil/main/init
    (setq evil-want-keybinding nil
	  evil-want-integration t)
#+end_src
Don't print the current mode:
#+begin_src elisp :noweb-ref evil/main/init
    (setq evil-echo-state nil)
#+end_src
Move by visual lines:
#+begin_src elisp :noweb-ref evil/main/init
  (defun evil-next-line--check-visual-line-mode (orig-fun &rest args)
    (if visual-line-mode
        (apply 'evil-next-visual-line args)
      (apply orig-fun args)))

  (advice-add 'evil-next-line :around 'evil-next-line--check-visual-line-mode)

  (defun evil-previous-line--check-visual-line-mode (orig-fun &rest args)
    (if visual-line-mode
        (apply 'evil-previous-visual-line args)
      (apply orig-fun args)))

  (advice-add 'evil-previous-line
    :around 'evil-previous-line--check-visual-line-mode)
#+end_src
** evil integrations
This is a collections of various integrations:
#+begin_src elisp :noweb-ref evil/integrations
(use-package evil-collection
  :after evil
  :init (evil-collection-init))
#+end_src
And this is an integration for Org-mode:
#+begin_src elisp :noweb-ref evil/integrations
(use-package evil-org
  :hook (org-mode . evil-org-mode)
  :custom
  (setq org-special-ctrl-a/e t)
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src
** vim plugins
This is for a way faster way to change surrounding like parenthesis:
#+begin_src elisp :noweb-ref evil/plugins
(use-package evil-surround
  :after evil
  :config (global-evil-surround-mode 1))
#+end_src
And this is for commenting portions of code:
#+begin_src elisp :noweb-ref evil/plugins
(use-package evil-commentary
  :after evil
  :config (evil-commentary-mode))
#+end_src
Vi-like number controlling:
#+begin_src elisp :noweb-ref evil/plugins
  (use-package evil-numbers
    :after evil
    :config
    (evil-define-key '(normal visual) 'global (kbd "SPC +") 'evil-numbers/inc-at-pt)
    (evil-define-key '(normal visual) 'global (kbd "SPC -") 'evil-numbers/dec-at-pt))
#+end_src
** undo
This is the undo system I use; it also provides a nice visualization of the undo-tree.
#+name: evil/undo
#+begin_src elisp
  (use-package undo-tree
    :init
    <<evil/undo/options>>
    <<evil/undo/init>>
    :config (global-undo-tree-mode))
#+end_src
Set where should it save files:
#+begin_src elisp :noweb-ref evil/undo/options
  (setq undo-dir "/home/davide/.config/emacs/undo/"
        undo-tree-history-directory-alist `(("." . ,undo-dir)))
#+end_src
Set keybinding for the visualizer:
#+begin_src elisp :noweb-ref evil/undo/init
  (df/leader "u" 'undo-tree-visualize)
#+end_src
* Note taking üìù
** Org Mode: options
Use builtin org-mode:
#+name: note-taking
#+begin_src elisp
  (use-package org
    :custom
    <<org/options>>
    <<org/keywords>>
    :init
    <<org/keybindings>>
    ;; :straight (:type built-in)
    )
  <<org/plugins>>
  <<org/beautify>>
#+end_src
Generic option:
- ~org-ellipsis~: substitute character used by OrgMode to indicate that an headline is not empty.
- ~org-startup-folded~: tell OrgMode to collapse heading on startup.
#+begin_src elisp :noweb-ref org/options
  (org-ellipsis " ‚ñæ")
  (org-startup-folded t)
#+end_src
Keybindings I use:
#+begin_src elisp :noweb-ref org/keybindings
  (df/leader "o" '(:ignore t :which-key "org-mode")
             "oo" 'org-open-at-point
             "ob" 'org-babel-tangle
             "oe" 'org-export-dispatch
             ; "oc" 'org-toggle-checkbox
             "op" 'org-priority
             "od" '(:ignore t :which-key "date")
             "odc" 'org-time-stamp
             "ods" 'org-schedule
             "odd" 'org-deadline)
#+end_src
Add keywords and tags:
#+begin_src elisp :noweb-ref org/keywords
  (org-todo-keywords '("ACTIVE" "NEXT" "TODO" "WAIT" "|" "DONE" "CANC"))
  (org-tag-alist '(("@w") ("@h") ("@t") ("idea")))
  (org-tags-column 0)
#+end_src
** Org Mode: plugins
Faster insertion of code blocks:
#+begin_src elisp :noweb-ref org/plugins
  (use-package org-tempo
    :ensure org
    ;; :straight (:type built-in)
    :config
    (add-to-list 'org-structure-template-alist '("caddy" . "src caddy"))
    (add-to-list 'org-structure-template-alist '("el" . "src elisp"))
    (add-to-list 'org-structure-template-alist '("md" . "src markdown"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("rs" . "src rust"))
    (add-to-list 'org-structure-template-alist '("sh" . "src bash"))
    (add-to-list 'org-structure-template-alist '("sql" . "src sql"))
    (add-to-list 'org-structure-template-alist '("yml" . "src yaml")))
#+end_src
This makes ~<el TAB~ insert an elisp code block.
Download Github flavored Markdown exporter and define the exports backends I use:
#+begin_src elisp :noweb-ref org/plugins
  (use-package ox-gfm
    :config 
    (setq org-export-backends '(html latex ox-gfm)))
#+end_src
I don't like text spanning from the beginning to the end of the screen. The first package adjusts margins to fix this, while the second package makes wrapping smarter. Visual explanation [[https://codeberg.org/joostkremers/visual-fill-column][here]].
#+begin_src elisp :noweb-ref org/plugins
  (use-package visual-fill-column
    :custom
    (visual-fill-column-width 120)
    (visual-fill-column-center-text t)
    (truncate-lines nil))
  (use-package adaptive-wrap)
#+end_src
Change header and list dots style:
#+begin_src elisp :noweb-ref org/plugins
  (use-package org-superstar
     :init (setq org-superstar-remove-leading-stars t))
#+end_src
Hide most markup symbols:
#+begin_src elisp :noweb-ref org/plugins
  (use-package org-appear
    :custom ((org-hide-emphasis-markers t)
             (org-appear-autolinks t)))
#+end_src
As a reminder, package to automatically render latex fragments when the cursor is away:
#+begin_src elisp
  (use-package org-fragtog
    :custom
    (org-startup-with-latex-preview t)
    (org-latex-preview-ltxpng-directory (concat user-emacs-directory "ltximg/"))
    ;; :init
    ;; (setq org-latex-packages-alist '())
    ;; (add-to-list 'org-latex-packages-alist '("" "pgfplots" t))
    :straight (:host github :repo "io12/org-fragtog"))
#+end_src
** Org Mode: beautify
Org mode is treated in a special way:
#+begin_src elisp :noweb-ref org/beautify
  (defun df/org-mode-beautify ()
    ;; set some faces
    <<org/beautify/faces>>
    ;; change symbol appearence
    (org-appear-mode t)
    (org-superstar-mode t)
    ;;(org-fragtog-mode t)
    ;; Limit buffer width, center eventually.
    (visual-line-mode t)
    (adaptive-wrap-prefix-mode t)
    (visual-fill-column-mode t))
  (add-hook 'org-mode-hook 'df/org-mode-beautify)
#+end_src
These are custom faces that, in my opinion, give Org a cleaner look:
- Make begin and end line of a block have no background:
  #+begin_src elisp :noweb-ref org/beautify/faces
    (set-face-attribute 'org-block-begin-line nil 
      :inherit 'font-lock-comment-face)
  #+end_src
** Org Mode: roam
Package:
#+name: note-taking/roam
#+begin_src elisp
  (use-package org-roam
    :hook (org-roam-capture-new-node . (lambda () (org-roam-tag-add '("draft"))))
    :config
    (org-roam-db-autosync-mode)
    (df/leader "w" '(:ignore t :which-key "wiki")
               "ww" 'org-roam-node-find
               "wt" 'org-roam-tag-add)
    :custom
    (org-roam-node-display-template (concat "${title:*}" (propertize "${tags:20}" 'face 'org-tag)))
    (org-roam-directory "~/Notes/wiki")
    (org-roam-completion-everywhere t))
  <<note-taking/roam/plugins>>
#+end_src
UI:
#+begin_src elisp :noweb-ref note-taking/roam/plugins
  (use-package org-roam-ui
    :custom (org-roam-ui-open-on-start nil)
    :hook (after-init . org-roam-ui-mode))
#+end_src
* Programming ‚öóÔ∏è
** Treesitter
Highlighting via tree parsing:
#+begin_src elisp :noweb-ref programming/treesitter
  (use-package tree-sitter-langs)
  (use-package tree-sitter
    :hook (tree-sitter-mode . tree-sitter-hl-mode)
    :config (global-tree-sitter-mode))
#+end_src
** LSP mode
Enable LSP support:
#+begin_src elisp :noweb-ref programming/lsp
  (use-package lsp-mode
   :config (df/leader "l" lsp-command-map)
   :custom (lsp-headerline-breadcrumb-enable nil))
#+end_src
UI features:
#+begin_src elisp
  (use-package lsp-ui
   :custom
   (lsp-ui-doc-show-with-mouse t))
#+end_src
** Languages
*** Python
Use pyright LSP:
#+begin_src elisp :noweb-ref programming/langs
  (use-package lsp-pyright
    :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp-deferred))))
#+end_src
*** Rust
#+begin_src elisp :noweb-ref programming/langs
  (use-package rust-mode
    :hook (rust-mode . lsp-deferred))
#+end_src
** Company
This is the completion engine, hooked up to lsp-mode:
#+name: programming/company
#+begin_src elisp
  (use-package company
    :hook ((after-init . global-company-mode)
           (prog-mode . (lambda () (setq-local company-idle-delay 0.4))))
    :general
    (general-imap "C-n" 'company-select-next
                  "C-p" 'company-select-previous)
    :config
    (setq company-selection-wrap-around t
          company-minimum-prefix-length 1
          company-idle-delay nil)
    (company-tng-configure-default))
  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src
** magit
This is a git client I want to test:
#+name: programming/magit
#+begin_src elisp
    (use-package magit
      :config (df/leader "g" 'magit))
#+end_src
* Miscellaneous üóÉÔ∏è
** todo file
I like using a TODO file, which keeps track of what I'm doing and what I have to do:
#+begin_src elisp :noweb-ref misc
  (setq inhibit-startup-screen t
        initial-buffer-choice "~/current.org")
#+end_src
** autoclose parenthesis
Autoclose parenthesis, quotation marks, etc:
#+begin_src elisp :noweb-ref misc
  (electric-pair-mode)
  (add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src
The hook inhibits pairing of ~<~ in org-mode, since it is used for ~org-tempo~.
** backup
Sets where to save backup and auto-save dir.
#+begin_src elisp :noweb-ref misc
  (setq backup-dir (concat user-emacs-directory "backups")
        backup-directory-alist `(("." . ,backup-dir))
        auto-save-file-name-transforms `((".*" ,backup-dir t)))
#+end_src
** RFCs
#+begin_src elisp
  (use-package rfc-mode
    :custom (rfc-mode-directory (concat user-emacs-directory "rfc")))
#+end_src
** no tab please
Never insert tabs:
#+begin_src elisp :noweb-ref misc
(setq-default indent-tabs-mode nil)
#+end_src
** rainbow-mode
This shows a color preview inside Emacs for strings like #FF0000
#+begin_src elisp :noweb-ref misc
  (use-package rainbow-mode)
#+end_src
** additional filetypes
Miscellanous syntax highlight:
#+begin_src elisp :noweb-ref misc
  (use-package haskell-mode)
  (use-package php-mode)
  (use-package nix-mode)
  (use-package jinja2-mode)
  (use-package lua-mode)
  (use-package json-mode)
  (use-package yaml-mode)
  (use-package dockerfile-mode)
#+end_src
Better pdf viewer, disabled since not optimal yet:
#+begin_src elisp
  (use-package pdf-tools)
#+end_src
Markdown syntax-higlight plus some functions:
#+begin_src elisp :noweb-ref misc
  (use-package markdown-mode
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))
  (use-package edit-indirect)
#+end_src
** Visit symlinks to file under git
Follow link by default
#+begin_src elisp :noweb-ref misc
  (setq vc-follow-symlinks t)
#+end_src
