#+title: Snippets
#+PROPERTY: header-args :comments noweb :noweb yes

* .bashrc
This illustrate the structure of my bashrc:
#+begin_src bash :tangle bashrc
  #!/bin/bash
  <<bashrc/exit-non-interactive>>
  <<bashrc/autocompletions>>
  SNIPPET_DIR="$HOME/.config/bash"
  <<bashrc/snippets>>
#+end_src
Then tell bash to ignore the following if not running interactively:
#+begin_src bash :noweb-ref bashrc/exit-non-interactive
  case $- in
    *i*) ;;
      *) return;;
  esac
#+end_src
Enable autocompletions:
#+begin_src bash :noweb-ref bashrc/autocompletions
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
#+end_src
Source snippets, which are defined below. This makes the configuration more modular.
#+begin_src bash :noweb-ref bashrc/snippets
  source "$SNIPPET_DIR/history.sh"
  source "$SNIPPET_DIR/aliases.sh"
  source "$SNIPPET_DIR/prompt.sh"
  source "$SNIPPET_DIR/vars.sh"
#+end_src
Also, source this file, which sets variables and aliases for autojump:
#+begin_src bash :noweb-ref bashrc/snippets
  source "/usr/share/autojump/autojump.sh"
#+end_src
* .profile
This file is mainly used to set variables. This is its structure:
#+begin_src bash :tangle profile
  <<profile/variables>>
  <<profile/ssh-agent>>
  <<profile/misc>>
#+end_src
Set the editor used by multiple commands:
#+begin_src bash :noweb-ref profile/variables
  export EDITOR=/usr/bin/nvim
#+end_src
Add paths to ~$PATH~:
#+begin_src bash :noweb-ref profile/variables
  export PATH="$PATH:$HOME/.local/bin:$HOME/.cargo/bin"
#+end_src
Set the directory where pass searches password files:
#+begin_src bash :noweb-ref profile/variables
  export PASSWORD_STORE_DIR="$HOME/.local/share/password-store"
#+end_src
This starts a ssh-agent and sets proper variables:
#+begin_src bash :noweb-ref profile/ssh-agent
  case "$DESKTOP_SESSION" in
    awesome|xmonad) 
      export $(gnome-keyring-daemon --start)
      ;;
  esac
#+end_src
Tell ansible to use ~tux~ with ~cowsay~:
#+begin_src bash :noweb-ref profile/misc
  export ANSIBLE_COW_SELECTION=tux
#+end_src
Skip updating runtime in lutris:
#+begin_src bash :noweb-ref profile/misc
  export LUTRIS_SKIP_INIT=1
#+end_src
* snippets
** History
Summary of this snippet:
#+begin_src bash :tangle history.sh
  <<history/options>> 
#+end_src
I don't want to put /everything/ in history, the following option sets
what is put in history. It sets these rules:
- Exclude commands beginning with a space.
- Remove duplicates of current command from history, before inserting it.
#+begin_src bash :noweb-ref history/options
  HISTCONTROL=ignorespace:erasedups
#+end_src
Unlimited history:
#+begin_src bash :noweb-ref history/options
  HISTSIZE=
  HISTFILESIZE=
#+end_src
Command to remove duplicates from history:
#+begin_src bash :noweb-ref history/options
  function clean-bash-history() {
    echo "Old # of lines: $(wc -l ~/.bash_history | cut -f1)"
    echo "Old size of history: $(du -hs .bash_history  | cut -f1)"
    tac ~/.bash_history | awk '!seen[$0]++' | tac > /tmp/bash_history
    mv /tmp/bash_history ~/.bash_history
    echo "New # of lines: $(wc -l ~/.bash_history | cut -f1)"
    echo "New size of history: $(du -hs .bash_history  | cut -f1)"
  }
#+end_src
** Aliases
I've grouped aliases into groups:
#+begin_src bash :tangle aliases.sh
  <<aliases/colors>>
  <<aliases/ls>>
  <<aliases/emacs>>
  <<aliases/misc>>
#+end_src
Default commands to use colors:
#+name: aliases/colors
#+begin_src bash
  alias ls='ls --color=auto'
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
  alias ip='ip -c'
#+end_src
Some ~ls~ aliases:
#+name: aliases/ls
#+begin_src bash
  alias ll='ls -alhF'
  alias la='ls -A'
#+end_src
Shortcut for emacs:
#+name: aliases/emacs
#+begin_src bash
  alias ew='emacsclient -c'
  alias ef='emacsclient -c --no-wait'
#+end_src
Export a different ~$TERM~:
#+begin_src bash :noweb-ref aliases/misc
  alias ssh='TERM=xterm-256color ssh'
#+end_src
Actions from clipboard:
#+begin_src bash :noweb-ref aliases/misc
  alias gclip='xclip -o | gpg -d'
  alias jclip='xclip -o | jq'
  alias shclip='xclip -o -selection clipboard | bash'
  alias wclip='whois $(xclip -o)'
#+end_src
Curl and parse as json:
#+begin_src bash :noweb-ref aliases/misc
  function cj() {
    curl --silent $1 | jq
  }
#+end_src
Set default values for the formatter:
#+begin_src bash :noweb-ref aliases/misc
  alias yapf="yapf --style={based_on_style:google\,indent_width:2}"
#+end_src
Make directory and ~cd~ into it:
#+begin_src bash :noweb-ref aliases/misc
  function mkcd() {
    mkdir $1
    cd $1
  }
#+end_src
Print my ip:
#+begin_src bash :noweb-ref aliases/misc
  alias myip='printf "$(curl -s ifconfig.me || echo Network unavailable)\n"'
#+end_src
** Prompt
I've divided my prompt definition in two parts:
- A function, which prints the value I want my ~$PS1~ to be.
- A call to the above function
#+begin_src bash :tangle prompt.sh
  <<prompt/function>>
  <<prompt/variables>>
  PROMPT_DIRTRIM=2
  PS1=$(ps1)
  unset ps1
#+end_src
This division makes it easier to read my prompt configuration.
This is the function:
#+name: prompt/function
#+begin_src bash
  function ps1() {
          # Vars
          local bold="\[\e[1m\]"
          local black="\[\e[30m\]"
          local red="\[\e[31m\]"
          local green="\[\e[32m\]"
          local yellow="\[\e[33m\]"
          local blue="\[\e[34m\]"
          local magenta="\[\e[35m\]"
          local cyan="\[\e[36m\]"
          local reset="\[\e[m\]"
          # Prompt
          echo -n "$bold$magenta\u$reset"
          echo -n "@$bold$blue\h$reset"
          echo ":$bold\w$reset"
          echo -n "$green\$ $reset"
  }
#+end_src
This settings makes ~\w~ print at most the nearest 2 dirs:
#+begin_src bash
  PROMPT_DIRTRIM=2
#+end_src
** Exports
This section define variables.
#+begin_src bash :tangle vars.sh
  <<vars/editor>>
#+end_src
If I have to edit something in the terminal, use vim:
#+begin_src bash :noweb-ref vars/editor
  export EDITOR=vim
#+end_src
