#!/usr/bin/env python3
# Std
import argparse
from pathlib import Path
import os
import subprocess
# External
import yaml

def getArgumentParser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser()
    # Whether to copy script in $PATH
    parser.add_argument(
        '--install', dest = 'install', action = 'store',
        help = "install and generate a default config",
        metavar = "PROFILE"
    )
    # Toggle or set colorscheme
    parser.add_argument(
        '-t', '--toggle', dest = 'colorscheme', action = 'store_const',
        const = "toggle",
        help = "toggle dark/light colorscheme"
    )
    parser.add_argument(
        '--set', dest = 'colorscheme', action = 'store',
        choices = ["dark", "light"],
        help = "set dark/light colorscheme as given"
    )
    return parser

## Helpers
# TODO: accept config-this.yaml too
def get_config_path() -> str:
    config_dir = os.environ.get("XDG_CONFIG_DIR")
    if config_dir is None:
        config_dir = Path.home() / ".config"
    else:
        config_dir = Path(config_dir)
    return config_dir / "local" / "config-this.yml"

# read config file
def config_read() -> dict:
    with open(get_config_path()) as f:
        return yaml.safe_load(f)

## Subroutins
# install this script in ~/.local/bin
# if --install
def install(profile):
    cmd = [
        "ansible-playbook",
        "--extra-vars", "@vars/common.yml",
        "--extra-vars", f"@vars/{profile}.yml",
        "install.yml"
    ]
    subprocess.run(cmd)

# launch the ansible
# if not --install
def playbook(profile: str, colorscheme: str, args: list = []):
    colorscheme = "{{" + colorscheme + "}}"
    cmd = [
        "ansible-playbook",
        "playbook.yml", "-K",
        "--extra-vars", "@vars/common.yml",
        "--extra-vars", f"@vars/{profile}.yml",
        "--extra-vars", f"CS={colorscheme}",
    ] + args
    subprocess.run(cmd)

def main():
    arguments = getArgumentParser().parse_args()
    if arguments.install is not None:
        print(f"Install: {arguments.install}.")
        install(arguments.install)
        return
    config = config_read()
    ## decide dark/light colorscheme
    # False = dark colorscheme
    # True = light colorscheme
    if arguments.colorscheme == "dark":
        colorscheme_bool = False
    elif arguments.colorscheme == "light":
        colorscheme_bool = True
    elif arguments.colorscheme == "toggle":
        colorscheme_bool = not config["colorscheme_current"]
    else:
        colorscheme_bool = config["colorscheme_current"]
    colorscheme_key = "colorscheme_light" if colorscheme_bool else "colorscheme_dark"
    ## set variables
    colorscheme = config[colorscheme_key]
    profile = config["profile"]
    playbook_dir = config["playbook_dir"]
    ## cd and run playbook
    os.chdir(playbook_dir)
    playbook(profile, colorscheme)

if __name__ == "__main__":
    main()
