#!/usr/bin/env python3
# Std
import argparse
from pathlib import Path
import os
# External
import yaml

def getArgumentParser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser()
    # Whether to copy script in $PATH
    parser.add_argument(
        '--install', dest = 'install', action = 'store_true',
        help = "install script in ~/.local/bin"
    )
    # Toggle or set colorscheme
    parser.add_argument(
        '-t', '--toggle', dest = 'colorscheme', action = 'store_const',
        const = "toggle",
        help = "toggle dark/light colorscheme"
    )
    parser.add_argument(
        '-s', '--set', dest = 'colorscheme', action = 'store',
        choices = ["dark", "light"],
        help = "set dark/light colorscheme as given"
    )
    return parser

## Helpers
# TODO: accept config-this.yaml too
def get_config_path() -> str:
    config_dir = os.environ.get("XDG_CONFIG_DIR")
    if config_dir is None:
        config_dir = Path.home() / ".config"
    else:
        config_dir = Path(config_dir)
    return config_dir / "local" / "config-this.yml"

def get_variables(profile) -> dict:
    with open("vars/common.yml") as f:
        vars_common = yaml.safe_load(f)
    with open(f"vars/{profile}.yml") as f:
        vars_profile = yaml.safe_load(f)
    return vars_common.update(var_profile)

# read config file
def config_read() -> dict:
    with open(get_config_path()) as f:
        return yaml.safe_load(f)

# write config file
def config_write(data: dict):
    config_path = get_config_path()
    # Ensure directory exists
    config_dir = config_path.parent
    if not config_dir.is_dir():
        config_parent.mkdir(parents=True)
    # Then write
    with open(config_path, "w") as f:
        return yaml.dump(data, f)

## Subroutins
# install this script in ~/.local/bin
# if --install
def install(profile):
    confirm = input("Installing. Are you in the playbook folder? ")
    if confirm not in ["yes", "y"]:
        print("Aborting.")
        exit(1)
    # Get variables; set data
    variables = get_variables(profile)
    data = {
        "path": str(Path.cwd()),
        "dark_theme": variables["CS"],
        "light_theme": variables["CS"],
        "current_theme": False
    }
    # Write config
    config_write(data)

# launch the ansible
# if not --install
def playbook():
    print("I'm launching the playbook.")

def main():
    # parsed = getArgumentParser().parse_args()
    # print(parsed)
    print(__file__)

if __name__ == "__main__":
    main()
